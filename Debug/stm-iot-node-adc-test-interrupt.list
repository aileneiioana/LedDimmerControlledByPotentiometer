
stm-iot-node-adc-test-interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800746c  0800746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f0  080074f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074f8  080074f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  20000070  08007570  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08007570  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce53  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e85  00000000  00000000  0003cef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  0003fd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  000413d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a7ed  00000000  00000000  00042920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cd5  00000000  00000000  0006d10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f59b  00000000  00000000  00085de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019537d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b0  00000000  00000000  001953d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007454 	.word	0x08007454

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007454 	.word	0x08007454

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:

uint16_t adc_val;
char msg[10];

int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

  HAL_Init();
 800057c:	f000 fec3 	bl	8001306 <HAL_Init>

  SystemClock_Config();
 8000580:	f000 f818 	bl	80005b4 <SystemClock_Config>

  PeriphCommonClock_Config();
 8000584:	f000 f878 	bl	8000678 <PeriphCommonClock_Config>

  MX_GPIO_Init();
 8000588:	f000 f9ee 	bl	8000968 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800058c:	f000 f98e 	bl	80008ac <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000590:	f000 f9bc 	bl	800090c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000594:	f000 f89e 	bl	80006d4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000598:	f000 f912 	bl	80007c0 <MX_TIM2_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800059c:	2100      	movs	r1, #0
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <main+0x34>)
 80005a0:	f004 fb92 	bl	8004cc8 <HAL_TIM_PWM_Start>

  while (1)
  {
	  HAL_ADC_Start_IT (&hadc1);
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <main+0x38>)
 80005a6:	f001 fa93 	bl	8001ad0 <HAL_ADC_Start_IT>
 80005aa:	e7fb      	b.n	80005a4 <main+0x2c>
 80005ac:	20000598 	.word	0x20000598
 80005b0:	200004b0 	.word	0x200004b0

080005b4 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	; 0x58
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2244      	movs	r2, #68	; 0x44
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f006 fb10 	bl	8006be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005da:	f002 ff9f 	bl	800351c <HAL_PWREx_ControlVoltageScaling>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e4:	f000 fb98 	bl	8000d18 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e8:	f002 ff7a 	bl	80034e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <SystemClock_Config+0xc0>)
 80005ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005f2:	4a20      	ldr	r2, [pc, #128]	; (8000674 <SystemClock_Config+0xc0>)
 80005f4:	f023 0318 	bic.w	r3, r3, #24
 80005f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005fc:	2314      	movs	r3, #20
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800060c:	2360      	movs	r3, #96	; 0x60
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000614:	2301      	movs	r3, #1
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800061c:	2328      	movs	r3, #40	; 0x28
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000620:	2307      	movs	r3, #7
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4618      	mov	r0, r3
 8000632:	f002 ffd9 	bl	80035e8 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800063c:	f000 fb6c 	bl	8000d18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2303      	movs	r3, #3
 8000646:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	2104      	movs	r1, #4
 8000658:	4618      	mov	r0, r3
 800065a:	f003 fbab 	bl	8003db4 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000664:	f000 fb58 	bl	8000d18 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000668:	f004 f894 	bl	8004794 <HAL_RCCEx_EnableMSIPLLMode>
}
 800066c:	bf00      	nop
 800066e:	3758      	adds	r7, #88	; 0x58
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000

08000678 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b0a2      	sub	sp, #136	; 0x88
 800067c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067e:	463b      	mov	r3, r7
 8000680:	2288      	movs	r2, #136	; 0x88
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f006 faaf 	bl	8006be8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800068a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800068e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000690:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000694:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000696:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800069a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800069c:	2301      	movs	r3, #1
 800069e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006a4:	2318      	movs	r3, #24
 80006a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006a8:	2307      	movs	r3, #7
 80006aa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80006b4:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80006b8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 fd7f 	bl	80041c0 <HAL_RCCEx_PeriphCLKConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80006c8:	f000 fb26 	bl	8000d18 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3788      	adds	r7, #136	; 0x88
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006f6:	4b2f      	ldr	r3, [pc, #188]	; (80007b4 <MX_ADC1_Init+0xe0>)
 80006f8:	4a2f      	ldr	r2, [pc, #188]	; (80007b8 <MX_ADC1_Init+0xe4>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006fc:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <MX_ADC1_Init+0xe0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000702:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000708:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <MX_ADC1_Init+0xe0>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070e:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000716:	2204      	movs	r2, #4
 8000718:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800071a:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <MX_ADC1_Init+0xe0>)
 800071c:	2200      	movs	r2, #0
 800071e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000722:	2201      	movs	r2, #1
 8000724:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000728:	2201      	movs	r2, #1
 800072a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <MX_ADC1_Init+0xe0>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <MX_ADC1_Init+0xe0>)
 800073c:	2200      	movs	r2, #0
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_ADC1_Init+0xe0>)
 800074a:	2200      	movs	r2, #0
 800074c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000756:	4817      	ldr	r0, [pc, #92]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000758:	f001 f864 	bl	8001824 <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000762:	f000 fad9 	bl	8000d18 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	4810      	ldr	r0, [pc, #64]	; (80007b4 <MX_ADC1_Init+0xe0>)
 8000772:	f002 f9c5 	bl	8002b00 <HAL_ADCEx_MultiModeConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800077c:	f000 facc 	bl	8000d18 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_ADC1_Init+0xe8>)
 8000782:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000784:	2306      	movs	r3, #6
 8000786:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800078c:	237f      	movs	r3, #127	; 0x7f
 800078e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000790:	2304      	movs	r3, #4
 8000792:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_ADC1_Init+0xe0>)
 800079e:	f001 fd05 	bl	80021ac <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007a8:	f000 fab6 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	; 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200004b0 	.word	0x200004b0
 80007b8:	50040000 	.word	0x50040000
 80007bc:	3ac04000 	.word	0x3ac04000

080007c0 <MX_TIM2_Init>:


static void MX_TIM2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08e      	sub	sp, #56	; 0x38
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e0:	463b      	mov	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <MX_TIM2_Init+0xe8>)
 80007f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_TIM2_Init+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_TIM2_Init+0xe8>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_TIM2_Init+0xe8>)
 8000808:	2264      	movs	r2, #100	; 0x64
 800080a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_TIM2_Init+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_TIM2_Init+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000818:	4823      	ldr	r0, [pc, #140]	; (80008a8 <MX_TIM2_Init+0xe8>)
 800081a:	f004 f99d 	bl	8004b58 <HAL_TIM_Base_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000824:	f000 fa78 	bl	8000d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000832:	4619      	mov	r1, r3
 8000834:	481c      	ldr	r0, [pc, #112]	; (80008a8 <MX_TIM2_Init+0xe8>)
 8000836:	f004 fc61 	bl	80050fc <HAL_TIM_ConfigClockSource>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000840:	f000 fa6a 	bl	8000d18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000844:	4818      	ldr	r0, [pc, #96]	; (80008a8 <MX_TIM2_Init+0xe8>)
 8000846:	f004 f9de 	bl	8004c06 <HAL_TIM_PWM_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000850:	f000 fa62 	bl	8000d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	4811      	ldr	r0, [pc, #68]	; (80008a8 <MX_TIM2_Init+0xe8>)
 8000864:	f005 f944 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800086e:	f000 fa53 	bl	8000d18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000872:	2360      	movs	r3, #96	; 0x60
 8000874:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	4619      	mov	r1, r3
 8000888:	4807      	ldr	r0, [pc, #28]	; (80008a8 <MX_TIM2_Init+0xe8>)
 800088a:	f004 fb23 	bl	8004ed4 <HAL_TIM_PWM_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000894:	f000 fa40 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000898:	4803      	ldr	r0, [pc, #12]	; (80008a8 <MX_TIM2_Init+0xe8>)
 800089a:	f000 fb21 	bl	8000ee0 <HAL_TIM_MspPostInit>

}
 800089e:	bf00      	nop
 80008a0:	3738      	adds	r7, #56	; 0x38
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000598 	.word	0x20000598

080008ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008b2:	4a15      	ldr	r2, [pc, #84]	; (8000908 <MX_USART1_UART_Init+0x5c>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008f0:	f005 f986 	bl	8005c00 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008fa:	f000 fa0d 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000514 	.word	0x20000514
 8000908:	40013800 	.word	0x40013800

0800090c <MX_USB_OTG_FS_PCD_Init>:
  * @param None
  * @retval None
  */

static void MX_USB_OTG_FS_PCD_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000916:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2206      	movs	r2, #6
 800091c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	2202      	movs	r2, #2
 8000922:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2202      	movs	r2, #2
 8000928:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	f002 fc7d 	bl	800324e <HAL_PCD_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800095a:	f000 f9dd 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000009c 	.word	0x2000009c

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	; 0x30
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800097e:	4bb7      	ldr	r3, [pc, #732]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4ab6      	ldr	r2, [pc, #728]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 8000984:	f043 0310 	orr.w	r3, r3, #16
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4bb4      	ldr	r3, [pc, #720]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0310 	and.w	r3, r3, #16
 8000992:	61bb      	str	r3, [r7, #24]
 8000994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4bb1      	ldr	r3, [pc, #708]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4ab0      	ldr	r2, [pc, #704]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4bae      	ldr	r3, [pc, #696]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	4bab      	ldr	r3, [pc, #684]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4aaa      	ldr	r2, [pc, #680]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4ba8      	ldr	r3, [pc, #672]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4ba5      	ldr	r3, [pc, #660]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4aa4      	ldr	r2, [pc, #656]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4ba2      	ldr	r3, [pc, #648]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b9f      	ldr	r3, [pc, #636]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a9e      	ldr	r2, [pc, #632]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b9c      	ldr	r3, [pc, #624]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b99      	ldr	r3, [pc, #612]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	4a98      	ldr	r2, [pc, #608]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a02:	4b96      	ldr	r3, [pc, #600]	; (8000c5c <MX_GPIO_Init+0x2f4>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a14:	4892      	ldr	r0, [pc, #584]	; (8000c60 <MX_GPIO_Init+0x2f8>)
 8000a16:	f002 fbdf 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a24:	f002 fbd8 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000a2e:	488d      	ldr	r0, [pc, #564]	; (8000c64 <MX_GPIO_Init+0x2fc>)
 8000a30:	f002 fbd2 	bl	80031d8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a3a:	488b      	ldr	r0, [pc, #556]	; (8000c68 <MX_GPIO_Init+0x300>)
 8000a3c:	f002 fbcc 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a46:	4888      	ldr	r0, [pc, #544]	; (8000c68 <MX_GPIO_Init+0x300>)
 8000a48:	f002 fbc6 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a52:	4886      	ldr	r0, [pc, #536]	; (8000c6c <MX_GPIO_Init+0x304>)
 8000a54:	f002 fbc0 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2120      	movs	r1, #32
 8000a5c:	4881      	ldr	r0, [pc, #516]	; (8000c64 <MX_GPIO_Init+0x2fc>)
 8000a5e:	f002 fbbb 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2101      	movs	r1, #1
 8000a66:	487e      	ldr	r0, [pc, #504]	; (8000c60 <MX_GPIO_Init+0x2f8>)
 8000a68:	f002 fbb6 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a6c:	f240 1315 	movw	r3, #277	; 0x115
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4876      	ldr	r0, [pc, #472]	; (8000c60 <MX_GPIO_Init+0x2f8>)
 8000a86:	f002 f9fd 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a8a:	236a      	movs	r3, #106	; 0x6a
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4870      	ldr	r0, [pc, #448]	; (8000c60 <MX_GPIO_Init+0x2f8>)
 8000aa0:	f002 f9f0 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aaa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	486c      	ldr	r0, [pc, #432]	; (8000c6c <MX_GPIO_Init+0x304>)
 8000abc:	f002 f9e2 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D0_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f002 f9d1 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000ae2:	f248 1304 	movw	r3, #33028	; 0x8104
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f002 f9c1 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b02:	23e0      	movs	r3, #224	; 0xe0
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b12:	2305      	movs	r3, #5
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f002 f9b0 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	484a      	ldr	r0, [pc, #296]	; (8000c64 <MX_GPIO_Init+0x2fc>)
 8000b3a:	f002 f9a3 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b3e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000b42:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4843      	ldr	r0, [pc, #268]	; (8000c64 <MX_GPIO_Init+0x2fc>)
 8000b58:	f002 f994 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b5c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b60:	61fb      	str	r3, [r7, #28]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	483d      	ldr	r0, [pc, #244]	; (8000c68 <MX_GPIO_Init+0x300>)
 8000b74:	f002 f986 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b78:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4835      	ldr	r0, [pc, #212]	; (8000c68 <MX_GPIO_Init+0x300>)
 8000b92:	f002 f977 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	482f      	ldr	r0, [pc, #188]	; (8000c6c <MX_GPIO_Init+0x304>)
 8000bb0:	f002 f968 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000bb4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4828      	ldr	r0, [pc, #160]	; (8000c6c <MX_GPIO_Init+0x304>)
 8000bcc:	f002 f95a 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be0:	2305      	movs	r3, #5
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	481f      	ldr	r0, [pc, #124]	; (8000c68 <MX_GPIO_Init+0x300>)
 8000bec:	f002 f94a 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000bf0:	2378      	movs	r3, #120	; 0x78
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c00:	2307      	movs	r3, #7
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4817      	ldr	r0, [pc, #92]	; (8000c68 <MX_GPIO_Init+0x300>)
 8000c0c:	f002 f93a 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c16:	2312      	movs	r3, #18
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c22:	2304      	movs	r3, #4
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <MX_GPIO_Init+0x2fc>)
 8000c2e:	f002 f929 	bl	8002e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2017      	movs	r0, #23
 8000c38:	f002 f8ed 	bl	8002e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c3c:	2017      	movs	r0, #23
 8000c3e:	f002 f906 	bl	8002e4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2028      	movs	r0, #40	; 0x28
 8000c48:	f002 f8e5 	bl	8002e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c4c:	2028      	movs	r0, #40	; 0x28
 8000c4e:	f002 f8fe 	bl	8002e4e <HAL_NVIC_EnableIRQ>

}
 8000c52:	bf00      	nop
 8000c54:	3730      	adds	r7, #48	; 0x30
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	48001000 	.word	0x48001000
 8000c64:	48000400 	.word	0x48000400
 8000c68:	48000c00 	.word	0x48000c00
 8000c6c:	48000800 	.word	0x48000800

08000c70 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc1);
 8000c78:	4815      	ldr	r0, [pc, #84]	; (8000cd0 <HAL_ADC_ConvCpltCallback+0x60>)
 8000c7a:	f001 f85b 	bl	8001d34 <HAL_ADC_GetValue>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000c84:	801a      	strh	r2, [r3, #0]
  adc_val=normalize(adc_val);
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f82c 	bl	8000ce8 <normalize>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000c96:	801a      	strh	r2, [r3, #0]
  sprintf(msg, "%hu\r\n", adc_val);
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000ca0:	480e      	ldr	r0, [pc, #56]	; (8000cdc <HAL_ADC_ConvCpltCallback+0x6c>)
 8000ca2:	f005 ffa9 	bl	8006bf8 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <HAL_ADC_ConvCpltCallback+0x6c>)
 8000ca8:	f7ff fa92 	bl	80001d0 <strlen>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb4:	4909      	ldr	r1, [pc, #36]	; (8000cdc <HAL_ADC_ConvCpltCallback+0x6c>)
 8000cb6:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000cb8:	f004 fff0 	bl	8005c9c <HAL_UART_Transmit>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, adc_val); // Configure the new value of the pulse (duty cycle)
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000cbe:	881a      	ldrh	r2, [r3, #0]
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200004b0 	.word	0x200004b0
 8000cd4:	20000098 	.word	0x20000098
 8000cd8:	0800746c 	.word	0x0800746c
 8000cdc:	200004a4 	.word	0x200004a4
 8000ce0:	20000514 	.word	0x20000514
 8000ce4:	20000598 	.word	0x20000598

08000ce8 <normalize>:

//0...4095
int normalize(int x){
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	return (x*100)/4095;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2264      	movs	r2, #100	; 0x64
 8000cf4:	fb02 f303 	mul.w	r3, r2, r3
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <normalize+0x2c>)
 8000cfa:	fb82 1203 	smull	r1, r2, r2, r3
 8000cfe:	441a      	add	r2, r3
 8000d00:	12d2      	asrs	r2, r2, #11
 8000d02:	17db      	asrs	r3, r3, #31
 8000d04:	1ad3      	subs	r3, r2, r3
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	80080081 	.word	0x80080081

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_MspInit+0x44>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <HAL_MspInit+0x44>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6613      	str	r3, [r2, #96]	; 0x60
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_MspInit+0x44>)
 8000d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x44>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x44>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x44>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000

08000d6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	; 0x30
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a31      	ldr	r2, [pc, #196]	; (8000e50 <HAL_ADC_MspInit+0xe4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d15c      	bne.n	8000e48 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d8e:	4b31      	ldr	r3, [pc, #196]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a30      	ldr	r2, [pc, #192]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000d94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a2a      	ldr	r2, [pc, #168]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a24      	ldr	r2, [pc, #144]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <HAL_ADC_MspInit+0xe8>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000dee:	233f      	movs	r3, #63	; 0x3f
 8000df0:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000df2:	230b      	movs	r3, #11
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4815      	ldr	r0, [pc, #84]	; (8000e58 <HAL_ADC_MspInit+0xec>)
 8000e02:	f002 f83f 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000e06:	2310      	movs	r3, #16
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e0a:	230b      	movs	r3, #11
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1c:	f002 f832 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e24:	230b      	movs	r3, #11
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	480a      	ldr	r0, [pc, #40]	; (8000e5c <HAL_ADC_MspInit+0xf0>)
 8000e34:	f002 f826 	bl	8002e84 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2012      	movs	r0, #18
 8000e3e:	f001 ffea 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e42:	2012      	movs	r0, #18
 8000e44:	f002 f803 	bl	8002e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3730      	adds	r7, #48	; 0x30
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	50040000 	.word	0x50040000
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000800 	.word	0x48000800
 8000e5c:	48000400 	.word	0x48000400

08000e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e80:	d128      	bne.n	8000ed4 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <HAL_TIM_Base_MspInit+0x7c>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	4a15      	ldr	r2, [pc, #84]	; (8000edc <HAL_TIM_Base_MspInit+0x7c>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <HAL_TIM_Base_MspInit+0x7c>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_TIM_Base_MspInit+0x7c>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <HAL_TIM_Base_MspInit+0x7c>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_TIM_Base_MspInit+0x7c>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f001 ffd8 	bl	8002e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f00:	d11c      	bne.n	8000f3c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_TIM_MspPostInit+0x64>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <HAL_TIM_MspPostInit+0x64>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <HAL_TIM_MspPostInit+0x64>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f001 ffa4 	bl	8002e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3720      	adds	r7, #32
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40021000 	.word	0x40021000

08000f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ae      	sub	sp, #184	; 0xb8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	2288      	movs	r2, #136	; 0x88
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f005 fe3d 	bl	8006be8 <memset>
  if(huart->Instance==USART1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a42      	ldr	r2, [pc, #264]	; (800107c <HAL_UART_MspInit+0x134>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d13b      	bne.n	8000ff0 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 f91b 	bl	80041c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f90:	f7ff fec2 	bl	8000d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f94:	4b3a      	ldr	r3, [pc, #232]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f98:	4a39      	ldr	r2, [pc, #228]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9e:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa0:	4b37      	ldr	r3, [pc, #220]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	4b34      	ldr	r3, [pc, #208]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb0:	4a33      	ldr	r2, [pc, #204]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000fc4:	23c0      	movs	r3, #192	; 0xc0
 8000fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4826      	ldr	r0, [pc, #152]	; (8001084 <HAL_UART_MspInit+0x13c>)
 8000fea:	f001 ff4b 	bl	8002e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fee:	e040      	b.n	8001072 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a24      	ldr	r2, [pc, #144]	; (8001088 <HAL_UART_MspInit+0x140>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d13b      	bne.n	8001072 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4618      	mov	r0, r3
 8001008:	f003 f8da 	bl	80041c0 <HAL_RCCEx_PeriphCLKConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001012:	f7ff fe81 	bl	8000d18 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <HAL_UART_MspInit+0x138>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	4a19      	ldr	r2, [pc, #100]	; (8001080 <HAL_UART_MspInit+0x138>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001020:	6593      	str	r3, [r2, #88]	; 0x58
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_UART_MspInit+0x138>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_UART_MspInit+0x138>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4a13      	ldr	r2, [pc, #76]	; (8001080 <HAL_UART_MspInit+0x138>)
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_UART_MspInit+0x138>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001046:	f44f 7340 	mov.w	r3, #768	; 0x300
 800104a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001060:	2307      	movs	r3, #7
 8001062:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001066:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800106a:	4619      	mov	r1, r3
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <HAL_UART_MspInit+0x144>)
 800106e:	f001 ff09 	bl	8002e84 <HAL_GPIO_Init>
}
 8001072:	bf00      	nop
 8001074:	37b8      	adds	r7, #184	; 0xb8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40013800 	.word	0x40013800
 8001080:	40021000 	.word	0x40021000
 8001084:	48000400 	.word	0x48000400
 8001088:	40004800 	.word	0x40004800
 800108c:	48000c00 	.word	0x48000c00

08001090 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010b0:	d154      	bne.n	800115c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <HAL_PCD_MspInit+0xd4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a2b      	ldr	r2, [pc, #172]	; (8001164 <HAL_PCD_MspInit+0xd4>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <HAL_PCD_MspInit+0xd4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80010ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f001 fecf 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80010e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010f8:	230a      	movs	r3, #10
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f001 febd 	bl	8002e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_PCD_MspInit+0xd4>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <HAL_PCD_MspInit+0xd4>)
 8001110:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_PCD_MspInit+0xd4>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_PCD_MspInit+0xd4>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d114      	bne.n	8001158 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_PCD_MspInit+0xd4>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <HAL_PCD_MspInit+0xd4>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	6593      	str	r3, [r2, #88]	; 0x58
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_PCD_MspInit+0xd4>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001146:	f002 fa3f 	bl	80035c8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_PCD_MspInit+0xd4>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <HAL_PCD_MspInit+0xd4>)
 8001150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001154:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001156:	e001      	b.n	800115c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001158:	f002 fa36 	bl	80035c8 <HAL_PWREx_EnableVddUSB>
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40021000 	.word	0x40021000

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b4:	f000 f8fc 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <ADC1_2_IRQHandler+0x10>)
 80011c2:	f000 fdc5 	bl	8001d50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200004b0 	.word	0x200004b0

080011d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80011d4:	2020      	movs	r0, #32
 80011d6:	f002 f817 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80011da:	2040      	movs	r0, #64	; 0x40
 80011dc:	f002 f814 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D11_Pin);
 80011e0:	2080      	movs	r0, #128	; 0x80
 80011e2:	f002 f811 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ISM43362_RST_Pin);
 80011e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011ea:	f002 f80d 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_CLK_Pin);
 80011f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011fa:	f002 f805 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_NCS_Pin);
 80011fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001202:	f002 f801 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001206:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800120a:	f001 fffd 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO2_Pin);
 800120e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001212:	f001 fff9 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO3_Pin);
 8001216:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800121a:	f001 fff5 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800122c:	4a14      	ldr	r2, [pc, #80]	; (8001280 <_sbrk+0x5c>)
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <_sbrk+0x60>)
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <_sbrk+0x64>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <_sbrk+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001254:	f005 fc9e 	bl	8006b94 <__errno>
 8001258:	4603      	mov	r3, r0
 800125a:	220c      	movs	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001262:	e009      	b.n	8001278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <_sbrk+0x64>)
 8001274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20018000 	.word	0x20018000
 8001284:	00000400 	.word	0x00000400
 8001288:	2000008c 	.word	0x2000008c
 800128c:	200005f8 	.word	0x200005f8

08001290 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <SystemInit+0x20>)
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <SystemInit+0x20>)
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b8:	f7ff ffea 	bl	8001290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012be:	490d      	ldr	r1, [pc, #52]	; (80012f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <LoopForever+0xe>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d4:	4c0a      	ldr	r4, [pc, #40]	; (8001300 <LoopForever+0x16>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e2:	f005 fc5d 	bl	8006ba0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012e6:	f7ff f947 	bl	8000578 <main>

080012ea <LoopForever>:

LoopForever:
    b LoopForever
 80012ea:	e7fe      	b.n	80012ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012f8:	08007500 	.word	0x08007500
  ldr r2, =_sbss
 80012fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001300:	200005f8 	.word	0x200005f8

08001304 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC3_IRQHandler>

08001306 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f001 fd75 	bl	8002e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001316:	2000      	movs	r0, #0
 8001318:	f000 f80e 	bl	8001338 <HAL_InitTick>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	e001      	b.n	800132c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001328:	f7ff fcfc 	bl	8000d24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800132c:	79fb      	ldrb	r3, [r7, #7]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <HAL_InitTick+0x6c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d023      	beq.n	8001394 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_InitTick+0x70>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <HAL_InitTick+0x6c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fd81 	bl	8002e6a <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10f      	bne.n	800138e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b0f      	cmp	r3, #15
 8001372:	d809      	bhi.n	8001388 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001374:	2200      	movs	r2, #0
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800137c:	f001 fd4b 	bl	8002e16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_InitTick+0x74>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e007      	b.n	8001398 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e004      	b.n	8001398 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e001      	b.n	8001398 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000004 	.word	0x20000004

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008
 80013d4:	200005e4 	.word	0x200005e4

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	200005e4 	.word	0x200005e4

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff ffee 	bl	80013d8 <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001416:	bf00      	nop
 8001418:	f7ff ffde 	bl	80013d8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008

08001438 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	609a      	str	r2, [r3, #8]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	609a      	str	r2, [r3, #8]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3360      	adds	r3, #96	; 0x60
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <LL_ADC_SetOffset+0x44>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	4313      	orrs	r3, r2
 80014d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014d8:	bf00      	nop
 80014da:	371c      	adds	r7, #28
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	03fff000 	.word	0x03fff000

080014e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3360      	adds	r3, #96	; 0x60
 80014f6:	461a      	mov	r2, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3360      	adds	r3, #96	; 0x60
 8001524:	461a      	mov	r2, r3
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	431a      	orrs	r2, r3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800153e:	bf00      	nop
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3330      	adds	r3, #48	; 0x30
 8001580:	461a      	mov	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	4413      	add	r3, r2
 800158e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	211f      	movs	r1, #31
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	401a      	ands	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	0e9b      	lsrs	r3, r3, #26
 80015a8:	f003 011f 	and.w	r1, r3, #31
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	431a      	orrs	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015bc:	bf00      	nop
 80015be:	371c      	adds	r7, #28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b087      	sub	sp, #28
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3314      	adds	r3, #20
 80015fe:	461a      	mov	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	0e5b      	lsrs	r3, r3, #25
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	4413      	add	r3, r2
 800160c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	0d1b      	lsrs	r3, r3, #20
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	2107      	movs	r1, #7
 800161c:	fa01 f303 	lsl.w	r3, r1, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	401a      	ands	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	0d1b      	lsrs	r3, r3, #20
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	431a      	orrs	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001638:	bf00      	nop
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800165c:	43db      	mvns	r3, r3
 800165e:	401a      	ands	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0318 	and.w	r3, r3, #24
 8001666:	4908      	ldr	r1, [pc, #32]	; (8001688 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001668:	40d9      	lsrs	r1, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	400b      	ands	r3, r1
 800166e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001672:	431a      	orrs	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	0007ffff 	.word	0x0007ffff

0800168c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 031f 	and.w	r3, r3, #31
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6093      	str	r3, [r2, #8]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016fc:	d101      	bne.n	8001702 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001720:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001724:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800174c:	d101      	bne.n	8001752 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001770:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001774:	f043 0201 	orr.w	r2, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <LL_ADC_IsEnabled+0x18>
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <LL_ADC_IsEnabled+0x1a>
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017c2:	f043 0204 	orr.w	r2, r3, #4
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d101      	bne.n	80017ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b08      	cmp	r3, #8
 800180e:	d101      	bne.n	8001814 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e136      	b.n	8001aac <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001848:	2b00      	cmp	r3, #0
 800184a:	d109      	bne.n	8001860 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff fa8d 	bl	8000d6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff3f 	bl	80016e8 <LL_ADC_IsDeepPowerDownEnabled>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff25 	bl	80016c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff5a 	bl	8001738 <LL_ADC_IsInternalRegulatorEnabled>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d115      	bne.n	80018b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff3e 	bl	8001710 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001894:	4b87      	ldr	r3, [pc, #540]	; (8001ab4 <HAL_ADC_Init+0x290>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	4a87      	ldr	r2, [pc, #540]	; (8001ab8 <HAL_ADC_Init+0x294>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	3301      	adds	r3, #1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018a8:	e002      	b.n	80018b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f9      	bne.n	80018aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff3c 	bl	8001738 <LL_ADC_IsInternalRegulatorEnabled>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10d      	bne.n	80018e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ca:	f043 0210 	orr.w	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	f043 0201 	orr.w	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff75 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 80018ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 80cf 	bne.w	8001a9a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 80cb 	bne.w	8001a9a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001908:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800190c:	f043 0202 	orr.w	r2, r3, #2
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff35 	bl	8001788 <LL_ADC_IsEnabled>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d115      	bne.n	8001950 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001924:	4865      	ldr	r0, [pc, #404]	; (8001abc <HAL_ADC_Init+0x298>)
 8001926:	f7ff ff2f 	bl	8001788 <LL_ADC_IsEnabled>
 800192a:	4604      	mov	r4, r0
 800192c:	4864      	ldr	r0, [pc, #400]	; (8001ac0 <HAL_ADC_Init+0x29c>)
 800192e:	f7ff ff2b 	bl	8001788 <LL_ADC_IsEnabled>
 8001932:	4603      	mov	r3, r0
 8001934:	431c      	orrs	r4, r3
 8001936:	4863      	ldr	r0, [pc, #396]	; (8001ac4 <HAL_ADC_Init+0x2a0>)
 8001938:	f7ff ff26 	bl	8001788 <LL_ADC_IsEnabled>
 800193c:	4603      	mov	r3, r0
 800193e:	4323      	orrs	r3, r4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4619      	mov	r1, r3
 800194a:	485f      	ldr	r0, [pc, #380]	; (8001ac8 <HAL_ADC_Init+0x2a4>)
 800194c:	f7ff fd74 	bl	8001438 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7e5b      	ldrb	r3, [r3, #25]
 8001954:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800195a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001960:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001966:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d106      	bne.n	800198c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	3b01      	subs	r3, #1
 8001984:	045b      	lsls	r3, r3, #17
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	d009      	beq.n	80019a8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_ADC_Init+0x2a8>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	69b9      	ldr	r1, [r7, #24]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff08 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 80019c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff15 	bl	80017fc <LL_ADC_INJ_IsConversionOngoing>
 80019d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d13d      	bne.n	8001a56 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d13a      	bne.n	8001a56 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019e4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019ec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019fc:	f023 0302 	bic.w	r3, r3, #2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	69b9      	ldr	r1, [r7, #24]
 8001a06:	430b      	orrs	r3, r1
 8001a08:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d118      	bne.n	8001a46 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a1e:	f023 0304 	bic.w	r3, r3, #4
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a2a:	4311      	orrs	r1, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a30:	4311      	orrs	r1, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a36:	430a      	orrs	r2, r1
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	611a      	str	r2, [r3, #16]
 8001a44:	e007      	b.n	8001a56 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0201 	bic.w	r2, r2, #1
 8001a54:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d10c      	bne.n	8001a78 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	f023 010f 	bic.w	r1, r3, #15
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	1e5a      	subs	r2, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
 8001a76:	e007      	b.n	8001a88 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 020f 	bic.w	r2, r2, #15
 8001a86:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8c:	f023 0303 	bic.w	r3, r3, #3
 8001a90:	f043 0201 	orr.w	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	655a      	str	r2, [r3, #84]	; 0x54
 8001a98:	e007      	b.n	8001aaa <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9e:	f043 0210 	orr.w	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3724      	adds	r7, #36	; 0x24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd90      	pop	{r4, r7, pc}
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	053e2d63 	.word	0x053e2d63
 8001abc:	50040000 	.word	0x50040000
 8001ac0:	50040100 	.word	0x50040100
 8001ac4:	50040200 	.word	0x50040200
 8001ac8:	50040300 	.word	0x50040300
 8001acc:	fff0c007 	.word	0xfff0c007

08001ad0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ad8:	4893      	ldr	r0, [pc, #588]	; (8001d28 <HAL_ADC_Start_IT+0x258>)
 8001ada:	f7ff fdd7 	bl	800168c <LL_ADC_GetMultimode>
 8001ade:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fe76 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f040 8111 	bne.w	8001d14 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_Start_IT+0x30>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e10e      	b.n	8001d1e <HAL_ADC_Start_IT+0x24e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 ff3f 	bl	800298c <ADC_Enable>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f040 80f8 	bne.w	8001d0a <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a7e      	ldr	r2, [pc, #504]	; (8001d2c <HAL_ADC_Start_IT+0x25c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d002      	beq.n	8001b3e <HAL_ADC_Start_IT+0x6e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	e000      	b.n	8001b40 <HAL_ADC_Start_IT+0x70>
 8001b3e:	4b7c      	ldr	r3, [pc, #496]	; (8001d30 <HAL_ADC_Start_IT+0x260>)
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d002      	beq.n	8001b4e <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d105      	bne.n	8001b5a <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	f023 0206 	bic.w	r2, r3, #6
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	659a      	str	r2, [r3, #88]	; 0x58
 8001b72:	e002      	b.n	8001b7a <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	221c      	movs	r2, #28
 8001b80:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 021c 	bic.w	r2, r2, #28
 8001b98:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d108      	bne.n	8001bb4 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0208 	orr.w	r2, r2, #8
 8001bb0:	605a      	str	r2, [r3, #4]
          break;
 8001bb2:	e008      	b.n	8001bc6 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0204 	orr.w	r2, r2, #4
 8001bc2:	605a      	str	r2, [r3, #4]
          break;
 8001bc4:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d107      	bne.n	8001bde <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0210 	orr.w	r2, r2, #16
 8001bdc:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a52      	ldr	r2, [pc, #328]	; (8001d2c <HAL_ADC_Start_IT+0x25c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d002      	beq.n	8001bee <HAL_ADC_Start_IT+0x11e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	e000      	b.n	8001bf0 <HAL_ADC_Start_IT+0x120>
 8001bee:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_ADC_Start_IT+0x260>)
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d008      	beq.n	8001c0a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b05      	cmp	r3, #5
 8001c02:	d002      	beq.n	8001c0a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	2b09      	cmp	r3, #9
 8001c08:	d13b      	bne.n	8001c82 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d02d      	beq.n	8001c74 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d110      	bne.n	8001c52 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0220 	bic.w	r2, r2, #32
 8001c3e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c4e:	605a      	str	r2, [r3, #4]
              break;
 8001c50:	e011      	b.n	8001c76 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c60:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0220 	orr.w	r2, r2, #32
 8001c70:	605a      	str	r2, [r3, #4]
              break;
 8001c72:	e000      	b.n	8001c76 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8001c74:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fd97 	bl	80017ae <LL_ADC_REG_StartConversion>
 8001c80:	e04c      	b.n	8001d1c <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a26      	ldr	r2, [pc, #152]	; (8001d2c <HAL_ADC_Start_IT+0x25c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d002      	beq.n	8001c9e <HAL_ADC_Start_IT+0x1ce>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	e000      	b.n	8001ca0 <HAL_ADC_Start_IT+0x1d0>
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_ADC_Start_IT+0x260>)
 8001ca0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d035      	beq.n	8001d1a <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cb6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d110      	bne.n	8001ce8 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0220 	bic.w	r2, r2, #32
 8001cd4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ce4:	605a      	str	r2, [r3, #4]
              break;
 8001ce6:	e019      	b.n	8001d1c <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cf6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	605a      	str	r2, [r3, #4]
              break;
 8001d08:	e008      	b.n	8001d1c <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d12:	e003      	b.n	8001d1c <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d14:	2302      	movs	r3, #2
 8001d16:	75fb      	strb	r3, [r7, #23]
 8001d18:	e000      	b.n	8001d1c <HAL_ADC_Start_IT+0x24c>
        }
 8001d1a:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	50040300 	.word	0x50040300
 8001d2c:	50040100 	.word	0x50040100
 8001d30:	50040000 	.word	0x50040000

08001d34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d6c:	4882      	ldr	r0, [pc, #520]	; (8001f78 <HAL_ADC_IRQHandler+0x228>)
 8001d6e:	f7ff fc8d 	bl	800168c <LL_ADC_GetMultimode>
 8001d72:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d017      	beq.n	8001dae <HAL_ADC_IRQHandler+0x5e>
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d012      	beq.n	8001dae <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fea3 	bl	8002aec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2202      	movs	r2, #2
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d004      	beq.n	8001dc2 <HAL_ADC_IRQHandler+0x72>
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10a      	bne.n	8001dd8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 8083 	beq.w	8001ed4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d07d      	beq.n	8001ed4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fba8 	bl	800154a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d062      	beq.n	8001ec6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a5d      	ldr	r2, [pc, #372]	; (8001f7c <HAL_ADC_IRQHandler+0x22c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d002      	beq.n	8001e10 <HAL_ADC_IRQHandler+0xc0>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	e000      	b.n	8001e12 <HAL_ADC_IRQHandler+0xc2>
 8001e10:	4b5b      	ldr	r3, [pc, #364]	; (8001f80 <HAL_ADC_IRQHandler+0x230>)
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d008      	beq.n	8001e2c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d002      	beq.n	8001e2c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2b09      	cmp	r3, #9
 8001e2a:	d104      	bne.n	8001e36 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	623b      	str	r3, [r7, #32]
 8001e34:	e00c      	b.n	8001e50 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a50      	ldr	r2, [pc, #320]	; (8001f7c <HAL_ADC_IRQHandler+0x22c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d002      	beq.n	8001e46 <HAL_ADC_IRQHandler+0xf6>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	e000      	b.n	8001e48 <HAL_ADC_IRQHandler+0xf8>
 8001e46:	4b4e      	ldr	r3, [pc, #312]	; (8001f80 <HAL_ADC_IRQHandler+0x230>)
 8001e48:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d135      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d12e      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fcb2 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d11a      	bne.n	8001eae <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 020c 	bic.w	r2, r2, #12
 8001e86:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d112      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	f043 0201 	orr.w	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
 8001eac:	e00b      	b.n	8001ec6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	f043 0210 	orr.w	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	f043 0201 	orr.w	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fed2 	bl	8000c70 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	220c      	movs	r2, #12
 8001ed2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d004      	beq.n	8001ee8 <HAL_ADC_IRQHandler+0x198>
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10b      	bne.n	8001f00 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 809f 	beq.w	8002032 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8099 	beq.w	8002032 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d105      	bne.n	8001f18 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fb53 	bl	80015c8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f22:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fb0e 	bl	800154a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f2e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <HAL_ADC_IRQHandler+0x22c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d002      	beq.n	8001f40 <HAL_ADC_IRQHandler+0x1f0>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	e000      	b.n	8001f42 <HAL_ADC_IRQHandler+0x1f2>
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_ADC_IRQHandler+0x230>)
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d008      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d002      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b07      	cmp	r3, #7
 8001f5a:	d104      	bne.n	8001f66 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	623b      	str	r3, [r7, #32]
 8001f64:	e013      	b.n	8001f8e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <HAL_ADC_IRQHandler+0x22c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d009      	beq.n	8001f84 <HAL_ADC_IRQHandler+0x234>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	e007      	b.n	8001f86 <HAL_ADC_IRQHandler+0x236>
 8001f76:	bf00      	nop
 8001f78:	50040300 	.word	0x50040300
 8001f7c:	50040100 	.word	0x50040100
 8001f80:	50040000 	.word	0x50040000
 8001f84:	4b7d      	ldr	r3, [pc, #500]	; (800217c <HAL_ADC_IRQHandler+0x42c>)
 8001f86:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d047      	beq.n	8002024 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <HAL_ADC_IRQHandler+0x25e>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d03f      	beq.n	8002024 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d13a      	bne.n	8002024 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	2b40      	cmp	r3, #64	; 0x40
 8001fba:	d133      	bne.n	8002024 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d12e      	bne.n	8002024 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fc16 	bl	80017fc <LL_ADC_INJ_IsConversionOngoing>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d11a      	bne.n	800200c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fe4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d112      	bne.n	8002024 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	655a      	str	r2, [r3, #84]	; 0x54
 800200a:	e00b      	b.n	8002024 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0210 	orr.w	r2, r3, #16
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fd39 	bl	8002a9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2260      	movs	r2, #96	; 0x60
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002038:	2b00      	cmp	r3, #0
 800203a:	d011      	beq.n	8002060 <HAL_ADC_IRQHandler+0x310>
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00c      	beq.n	8002060 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f896 	bl	8002184 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2280      	movs	r2, #128	; 0x80
 800205e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d012      	beq.n	8002090 <HAL_ADC_IRQHandler+0x340>
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00d      	beq.n	8002090 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 fd1f 	bl	8002ac4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002096:	2b00      	cmp	r3, #0
 8002098:	d012      	beq.n	80020c0 <HAL_ADC_IRQHandler+0x370>
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00d      	beq.n	80020c0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 fd11 	bl	8002ad8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d036      	beq.n	8002138 <HAL_ADC_IRQHandler+0x3e8>
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d031      	beq.n	8002138 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80020dc:	2301      	movs	r3, #1
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
 80020e0:	e014      	b.n	800210c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80020e8:	4825      	ldr	r0, [pc, #148]	; (8002180 <HAL_ADC_IRQHandler+0x430>)
 80020ea:	f7ff fadd 	bl	80016a8 <LL_ADC_GetMultiDMATransfer>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00b      	beq.n	800210c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80020f4:	2301      	movs	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	e008      	b.n	800210c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002108:	2301      	movs	r3, #1
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	2b01      	cmp	r3, #1
 8002110:	d10e      	bne.n	8002130 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002116:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	f043 0202 	orr.w	r2, r3, #2
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f834 	bl	8002198 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2210      	movs	r2, #16
 8002136:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	2b00      	cmp	r3, #0
 8002140:	d018      	beq.n	8002174 <HAL_ADC_IRQHandler+0x424>
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d013      	beq.n	8002174 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	f043 0208 	orr.w	r2, r3, #8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800216c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fc9e 	bl	8002ab0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002174:	bf00      	nop
 8002176:	3728      	adds	r7, #40	; 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	50040000 	.word	0x50040000
 8002180:	50040300 	.word	0x50040300

08002184 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b0b6      	sub	sp, #216	; 0xd8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x22>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e3c7      	b.n	800295e <HAL_ADC_ConfigChannel+0x7b2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fafb 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 83a8 	bne.w	8002938 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d824      	bhi.n	800223a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	3b02      	subs	r3, #2
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d81b      	bhi.n	8002232 <HAL_ADC_ConfigChannel+0x86>
 80021fa:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <HAL_ADC_ConfigChannel+0x54>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	08002211 	.word	0x08002211
 8002204:	08002219 	.word	0x08002219
 8002208:	08002221 	.word	0x08002221
 800220c:	08002229 	.word	0x08002229
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	220c      	movs	r2, #12
 8002214:	605a      	str	r2, [r3, #4]
          break;
 8002216:	e011      	b.n	800223c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2212      	movs	r2, #18
 800221c:	605a      	str	r2, [r3, #4]
          break;
 800221e:	e00d      	b.n	800223c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2218      	movs	r2, #24
 8002224:	605a      	str	r2, [r3, #4]
          break;
 8002226:	e009      	b.n	800223c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800222e:	605a      	str	r2, [r3, #4]
          break;
 8002230:	e004      	b.n	800223c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2206      	movs	r2, #6
 8002236:	605a      	str	r2, [r3, #4]
          break;
 8002238:	e000      	b.n	800223c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800223a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6859      	ldr	r1, [r3, #4]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	f7ff f991 	bl	8001570 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fabf 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 8002258:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff facb 	bl	80017fc <LL_ADC_INJ_IsConversionOngoing>
 8002266:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800226a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 81a6 	bne.w	80025c0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 81a1 	bne.w	80025c0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6819      	ldr	r1, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	461a      	mov	r2, r3
 800228c:	f7ff f9af 	bl	80015ee <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	08db      	lsrs	r3, r3, #3
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d00a      	beq.n	80022c8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6919      	ldr	r1, [r3, #16]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022c2:	f7ff f8ed 	bl	80014a0 <LL_ADC_SetOffset>
 80022c6:	e17b      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f90a 	bl	80014e8 <LL_ADC_GetOffsetChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10a      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x148>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff f8ff 	bl	80014e8 <LL_ADC_GetOffsetChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	f003 021f 	and.w	r2, r3, #31
 80022f2:	e01e      	b.n	8002332 <HAL_ADC_ConfigChannel+0x186>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff f8f4 	bl	80014e8 <LL_ADC_GetOffsetChannel>
 8002300:	4603      	mov	r3, r0
 8002302:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002312:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002316:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800231a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002322:	2320      	movs	r3, #32
 8002324:	e004      	b.n	8002330 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002326:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <HAL_ADC_ConfigChannel+0x19e>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0e9b      	lsrs	r3, r3, #26
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	e018      	b.n	800237c <HAL_ADC_ConfigChannel+0x1d0>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800235e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002362:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002366:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800236e:	2320      	movs	r3, #32
 8002370:	e004      	b.n	800237c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002372:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800237c:	429a      	cmp	r2, r3
 800237e:	d106      	bne.n	800238e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2200      	movs	r2, #0
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff f8c3 	bl	8001514 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2101      	movs	r1, #1
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff f8a7 	bl	80014e8 <LL_ADC_GetOffsetChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10a      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x20e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2101      	movs	r1, #1
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f89c 	bl	80014e8 <LL_ADC_GetOffsetChannel>
 80023b0:	4603      	mov	r3, r0
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	e01e      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x24c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2101      	movs	r1, #1
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff f891 	bl	80014e8 <LL_ADC_GetOffsetChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80023d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80023e8:	2320      	movs	r3, #32
 80023ea:	e004      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80023ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x264>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e9b      	lsrs	r3, r3, #26
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	e018      	b.n	8002442 <HAL_ADC_ConfigChannel+0x296>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002424:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800242c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002434:	2320      	movs	r3, #32
 8002436:	e004      	b.n	8002442 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002442:	429a      	cmp	r2, r3
 8002444:	d106      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2200      	movs	r2, #0
 800244c:	2101      	movs	r1, #1
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff f860 	bl	8001514 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2102      	movs	r1, #2
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff f844 	bl	80014e8 <LL_ADC_GetOffsetChannel>
 8002460:	4603      	mov	r3, r0
 8002462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x2d4>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2102      	movs	r1, #2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff f839 	bl	80014e8 <LL_ADC_GetOffsetChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	f003 021f 	and.w	r2, r3, #31
 800247e:	e01e      	b.n	80024be <HAL_ADC_ConfigChannel+0x312>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2102      	movs	r1, #2
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff f82e 	bl	80014e8 <LL_ADC_GetOffsetChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800249e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80024a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80024ae:	2320      	movs	r3, #32
 80024b0:	e004      	b.n	80024bc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80024b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d105      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x32a>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0e9b      	lsrs	r3, r3, #26
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	e016      	b.n	8002504 <HAL_ADC_ConfigChannel+0x358>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e004      	b.n	8002504 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80024fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002504:	429a      	cmp	r2, r3
 8002506:	d106      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2200      	movs	r2, #0
 800250e:	2102      	movs	r1, #2
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe ffff 	bl	8001514 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2103      	movs	r1, #3
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe ffe3 	bl	80014e8 <LL_ADC_GetOffsetChannel>
 8002522:	4603      	mov	r3, r0
 8002524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10a      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x396>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2103      	movs	r1, #3
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe ffd8 	bl	80014e8 <LL_ADC_GetOffsetChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	0e9b      	lsrs	r3, r3, #26
 800253c:	f003 021f 	and.w	r2, r3, #31
 8002540:	e017      	b.n	8002572 <HAL_ADC_ConfigChannel+0x3c6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2103      	movs	r1, #3
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe ffcd 	bl	80014e8 <LL_ADC_GetOffsetChannel>
 800254e:	4603      	mov	r3, r0
 8002550:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800255a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800255c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800255e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002564:	2320      	movs	r3, #32
 8002566:	e003      	b.n	8002570 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <HAL_ADC_ConfigChannel+0x3de>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	0e9b      	lsrs	r3, r3, #26
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	e011      	b.n	80025ae <HAL_ADC_ConfigChannel+0x402>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800259a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800259c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80025a2:	2320      	movs	r3, #32
 80025a4:	e003      	b.n	80025ae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80025a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d106      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2200      	movs	r2, #0
 80025b8:	2103      	movs	r1, #3
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe ffaa 	bl	8001514 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff f8df 	bl	8001788 <LL_ADC_IsEnabled>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f040 813f 	bne.w	8002850 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	461a      	mov	r2, r3
 80025e0:	f7ff f830 	bl	8001644 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a8e      	ldr	r2, [pc, #568]	; (8002824 <HAL_ADC_ConfigChannel+0x678>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	f040 8130 	bne.w	8002850 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10b      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x46c>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0e9b      	lsrs	r3, r3, #26
 8002606:	3301      	adds	r3, #1
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	2b09      	cmp	r3, #9
 800260e:	bf94      	ite	ls
 8002610:	2301      	movls	r3, #1
 8002612:	2300      	movhi	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	e019      	b.n	800264c <HAL_ADC_ConfigChannel+0x4a0>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002628:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800262a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002630:	2320      	movs	r3, #32
 8002632:	e003      	b.n	800263c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	3301      	adds	r3, #1
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2b09      	cmp	r3, #9
 8002644:	bf94      	ite	ls
 8002646:	2301      	movls	r3, #1
 8002648:	2300      	movhi	r3, #0
 800264a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800264c:	2b00      	cmp	r3, #0
 800264e:	d079      	beq.n	8002744 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002658:	2b00      	cmp	r3, #0
 800265a:	d107      	bne.n	800266c <HAL_ADC_ConfigChannel+0x4c0>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	3301      	adds	r3, #1
 8002664:	069b      	lsls	r3, r3, #26
 8002666:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800266a:	e015      	b.n	8002698 <HAL_ADC_ConfigChannel+0x4ec>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800267a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800267c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800267e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002684:	2320      	movs	r3, #32
 8002686:	e003      	b.n	8002690 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	3301      	adds	r3, #1
 8002692:	069b      	lsls	r3, r3, #26
 8002694:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x50c>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0e9b      	lsrs	r3, r3, #26
 80026aa:	3301      	adds	r3, #1
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2101      	movs	r1, #1
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	e017      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x53c>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80026c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80026d0:	2320      	movs	r3, #32
 80026d2:	e003      	b.n	80026dc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80026d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	2101      	movs	r1, #1
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	ea42 0103 	orr.w	r1, r2, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10a      	bne.n	800270e <HAL_ADC_ConfigChannel+0x562>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0e9b      	lsrs	r3, r3, #26
 80026fe:	3301      	adds	r3, #1
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	051b      	lsls	r3, r3, #20
 800270c:	e018      	b.n	8002740 <HAL_ADC_ConfigChannel+0x594>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800271c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002726:	2320      	movs	r3, #32
 8002728:	e003      	b.n	8002732 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800272a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800272c:	fab3 f383 	clz	r3, r3
 8002730:	b2db      	uxtb	r3, r3
 8002732:	3301      	adds	r3, #1
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002740:	430b      	orrs	r3, r1
 8002742:	e080      	b.n	8002846 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274c:	2b00      	cmp	r3, #0
 800274e:	d107      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x5b4>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0e9b      	lsrs	r3, r3, #26
 8002756:	3301      	adds	r3, #1
 8002758:	069b      	lsls	r3, r3, #26
 800275a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800275e:	e015      	b.n	800278c <HAL_ADC_ConfigChannel+0x5e0>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002778:	2320      	movs	r3, #32
 800277a:	e003      	b.n	8002784 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3301      	adds	r3, #1
 8002786:	069b      	lsls	r3, r3, #26
 8002788:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x600>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0e9b      	lsrs	r3, r3, #26
 800279e:	3301      	adds	r3, #1
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	e017      	b.n	80027dc <HAL_ADC_ConfigChannel+0x630>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	61fb      	str	r3, [r7, #28]
  return result;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80027c4:	2320      	movs	r3, #32
 80027c6:	e003      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	3301      	adds	r3, #1
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2101      	movs	r1, #1
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	ea42 0103 	orr.w	r1, r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10d      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x65c>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	0e9b      	lsrs	r3, r3, #26
 80027f2:	3301      	adds	r3, #1
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	3b1e      	subs	r3, #30
 8002800:	051b      	lsls	r3, r3, #20
 8002802:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002806:	e01d      	b.n	8002844 <HAL_ADC_ConfigChannel+0x698>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	613b      	str	r3, [r7, #16]
  return result;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d103      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002820:	2320      	movs	r3, #32
 8002822:	e005      	b.n	8002830 <HAL_ADC_ConfigChannel+0x684>
 8002824:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	3301      	adds	r3, #1
 8002832:	f003 021f 	and.w	r2, r3, #31
 8002836:	4613      	mov	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	3b1e      	subs	r3, #30
 800283e:	051b      	lsls	r3, r3, #20
 8002840:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002844:	430b      	orrs	r3, r1
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	6892      	ldr	r2, [r2, #8]
 800284a:	4619      	mov	r1, r3
 800284c:	f7fe fecf 	bl	80015ee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b44      	ldr	r3, [pc, #272]	; (8002968 <HAL_ADC_ConfigChannel+0x7bc>)
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d07a      	beq.n	8002952 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800285c:	4843      	ldr	r0, [pc, #268]	; (800296c <HAL_ADC_ConfigChannel+0x7c0>)
 800285e:	f7fe fe11 	bl	8001484 <LL_ADC_GetCommonPathInternalCh>
 8002862:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a41      	ldr	r2, [pc, #260]	; (8002970 <HAL_ADC_ConfigChannel+0x7c4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d12c      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002874:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d126      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a3c      	ldr	r2, [pc, #240]	; (8002974 <HAL_ADC_ConfigChannel+0x7c8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d004      	beq.n	8002890 <HAL_ADC_ConfigChannel+0x6e4>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a3b      	ldr	r2, [pc, #236]	; (8002978 <HAL_ADC_ConfigChannel+0x7cc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d15d      	bne.n	800294c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002894:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002898:	4619      	mov	r1, r3
 800289a:	4834      	ldr	r0, [pc, #208]	; (800296c <HAL_ADC_ConfigChannel+0x7c0>)
 800289c:	f7fe fddf 	bl	800145e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028a0:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_ADC_ConfigChannel+0x7d0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	099b      	lsrs	r3, r3, #6
 80028a6:	4a36      	ldr	r2, [pc, #216]	; (8002980 <HAL_ADC_ConfigChannel+0x7d4>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	099b      	lsrs	r3, r3, #6
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028ba:	e002      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3b01      	subs	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f9      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028c8:	e040      	b.n	800294c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <HAL_ADC_ConfigChannel+0x7d8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d118      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x75a>
 80028d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d112      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a23      	ldr	r2, [pc, #140]	; (8002974 <HAL_ADC_ConfigChannel+0x7c8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d004      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x748>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a22      	ldr	r2, [pc, #136]	; (8002978 <HAL_ADC_ConfigChannel+0x7cc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d12d      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028fc:	4619      	mov	r1, r3
 80028fe:	481b      	ldr	r0, [pc, #108]	; (800296c <HAL_ADC_ConfigChannel+0x7c0>)
 8002900:	f7fe fdad 	bl	800145e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002904:	e024      	b.n	8002950 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <HAL_ADC_ConfigChannel+0x7dc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d120      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002910:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d11a      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a14      	ldr	r2, [pc, #80]	; (8002974 <HAL_ADC_ConfigChannel+0x7c8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d115      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800292a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800292e:	4619      	mov	r1, r3
 8002930:	480e      	ldr	r0, [pc, #56]	; (800296c <HAL_ADC_ConfigChannel+0x7c0>)
 8002932:	f7fe fd94 	bl	800145e <LL_ADC_SetCommonPathInternalCh>
 8002936:	e00c      	b.n	8002952 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293c:	f043 0220 	orr.w	r2, r3, #32
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800294a:	e002      	b.n	8002952 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800294c:	bf00      	nop
 800294e:	e000      	b.n	8002952 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002950:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800295a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800295e:	4618      	mov	r0, r3
 8002960:	37d8      	adds	r7, #216	; 0xd8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	80080000 	.word	0x80080000
 800296c:	50040300 	.word	0x50040300
 8002970:	c7520000 	.word	0xc7520000
 8002974:	50040000 	.word	0x50040000
 8002978:	50040200 	.word	0x50040200
 800297c:	20000000 	.word	0x20000000
 8002980:	053e2d63 	.word	0x053e2d63
 8002984:	cb840000 	.word	0xcb840000
 8002988:	80000001 	.word	0x80000001

0800298c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe fef5 	bl	8001788 <LL_ADC_IsEnabled>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d14d      	bne.n	8002a40 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <ADC_Enable+0xc0>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00d      	beq.n	80029ce <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f043 0210 	orr.w	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e039      	b.n	8002a42 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe fec4 	bl	8001760 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029d8:	f7fe fcfe 	bl	80013d8 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029de:	e028      	b.n	8002a32 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fecf 	bl	8001788 <LL_ADC_IsEnabled>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d104      	bne.n	80029fa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe feb3 	bl	8001760 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029fa:	f7fe fced 	bl	80013d8 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d914      	bls.n	8002a32 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d00d      	beq.n	8002a32 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f043 0210 	orr.w	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e007      	b.n	8002a42 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d1cf      	bne.n	80029e0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	8000003f 	.word	0x8000003f

08002a50 <LL_ADC_IsEnabled>:
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <LL_ADC_IsEnabled+0x18>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <LL_ADC_IsEnabled+0x1a>
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d101      	bne.n	8002a8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b09f      	sub	sp, #124	; 0x7c
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e093      	b.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002b26:	2300      	movs	r3, #0
 8002b28:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a47      	ldr	r2, [pc, #284]	; (8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d102      	bne.n	8002b3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b38:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	e001      	b.n	8002b42 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10b      	bne.n	8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e072      	b.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff87 	bl	8002a76 <LL_ADC_REG_IsConversionOngoing>
 8002b68:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ff81 	bl	8002a76 <LL_ADC_REG_IsConversionOngoing>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d154      	bne.n	8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d151      	bne.n	8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b80:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002b82:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02c      	beq.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b9e:	035b      	lsls	r3, r3, #13
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ba8:	4829      	ldr	r0, [pc, #164]	; (8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002baa:	f7ff ff51 	bl	8002a50 <LL_ADC_IsEnabled>
 8002bae:	4604      	mov	r4, r0
 8002bb0:	4828      	ldr	r0, [pc, #160]	; (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bb2:	f7ff ff4d 	bl	8002a50 <LL_ADC_IsEnabled>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	431c      	orrs	r4, r3
 8002bba:	4828      	ldr	r0, [pc, #160]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002bbc:	f7ff ff48 	bl	8002a50 <LL_ADC_IsEnabled>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4323      	orrs	r3, r4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d137      	bne.n	8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bd0:	f023 030f 	bic.w	r3, r3, #15
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	6811      	ldr	r1, [r2, #0]
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	6892      	ldr	r2, [r2, #8]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	431a      	orrs	r2, r3
 8002be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002be4:	e028      	b.n	8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bf2:	4817      	ldr	r0, [pc, #92]	; (8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002bf4:	f7ff ff2c 	bl	8002a50 <LL_ADC_IsEnabled>
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	4816      	ldr	r0, [pc, #88]	; (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bfc:	f7ff ff28 	bl	8002a50 <LL_ADC_IsEnabled>
 8002c00:	4603      	mov	r3, r0
 8002c02:	431c      	orrs	r4, r3
 8002c04:	4815      	ldr	r0, [pc, #84]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c06:	f7ff ff23 	bl	8002a50 <LL_ADC_IsEnabled>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4323      	orrs	r3, r4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d112      	bne.n	8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c1a:	f023 030f 	bic.w	r3, r3, #15
 8002c1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c20:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c22:	e009      	b.n	8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002c36:	e000      	b.n	8002c3a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c42:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	377c      	adds	r7, #124	; 0x7c
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd90      	pop	{r4, r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	50040000 	.word	0x50040000
 8002c54:	50040100 	.word	0x50040100
 8002c58:	50040300 	.word	0x50040300
 8002c5c:	50040200 	.word	0x50040200

08002c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c92:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60d3      	str	r3, [r2, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f003 0307 	and.w	r3, r3, #7
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db0b      	blt.n	8002cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	4907      	ldr	r1, [pc, #28]	; (8002cfc <__NVIC_EnableIRQ+0x38>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000e100 	.word	0xe000e100

08002d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db0a      	blt.n	8002d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	490c      	ldr	r1, [pc, #48]	; (8002d4c <__NVIC_SetPriority+0x4c>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d28:	e00a      	b.n	8002d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4908      	ldr	r1, [pc, #32]	; (8002d50 <__NVIC_SetPriority+0x50>)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3b04      	subs	r3, #4
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	761a      	strb	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	; 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f1c3 0307 	rsb	r3, r3, #7
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	bf28      	it	cs
 8002d72:	2304      	movcs	r3, #4
 8002d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d902      	bls.n	8002d84 <NVIC_EncodePriority+0x30>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3b03      	subs	r3, #3
 8002d82:	e000      	b.n	8002d86 <NVIC_EncodePriority+0x32>
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	4313      	orrs	r3, r2
         );
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	; 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dcc:	d301      	bcc.n	8002dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00f      	b.n	8002df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <SysTick_Config+0x40>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dda:	210f      	movs	r1, #15
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002de0:	f7ff ff8e 	bl	8002d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <SysTick_Config+0x40>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dea:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <SysTick_Config+0x40>)
 8002dec:	2207      	movs	r2, #7
 8002dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	e000e010 	.word	0xe000e010

08002e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ff29 	bl	8002c60 <__NVIC_SetPriorityGrouping>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e28:	f7ff ff3e 	bl	8002ca8 <__NVIC_GetPriorityGrouping>
 8002e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7ff ff8e 	bl	8002d54 <NVIC_EncodePriority>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff5d 	bl	8002d00 <__NVIC_SetPriority>
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff31 	bl	8002cc4 <__NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ffa2 	bl	8002dbc <SysTick_Config>
 8002e78:	4603      	mov	r3, r0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e92:	e17f      	b.n	8003194 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	2101      	movs	r1, #1
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 8171 	beq.w	800318e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d005      	beq.n	8002ec4 <HAL_GPIO_Init+0x40>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d130      	bne.n	8002f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	2203      	movs	r2, #3
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002efa:	2201      	movs	r2, #1
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f003 0201 	and.w	r2, r3, #1
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d118      	bne.n	8002f64 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f38:	2201      	movs	r2, #1
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	f003 0201 	and.w	r2, r3, #1
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d017      	beq.n	8002fa0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d123      	bne.n	8002ff4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	08da      	lsrs	r2, r3, #3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3208      	adds	r2, #8
 8002fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	220f      	movs	r2, #15
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3208      	adds	r2, #8
 8002fee:	6939      	ldr	r1, [r7, #16]
 8002ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	2203      	movs	r2, #3
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0203 	and.w	r2, r3, #3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80ac 	beq.w	800318e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003036:	4b5f      	ldr	r3, [pc, #380]	; (80031b4 <HAL_GPIO_Init+0x330>)
 8003038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303a:	4a5e      	ldr	r2, [pc, #376]	; (80031b4 <HAL_GPIO_Init+0x330>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6613      	str	r3, [r2, #96]	; 0x60
 8003042:	4b5c      	ldr	r3, [pc, #368]	; (80031b4 <HAL_GPIO_Init+0x330>)
 8003044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800304e:	4a5a      	ldr	r2, [pc, #360]	; (80031b8 <HAL_GPIO_Init+0x334>)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3302      	adds	r3, #2
 8003056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	220f      	movs	r2, #15
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003078:	d025      	beq.n	80030c6 <HAL_GPIO_Init+0x242>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a4f      	ldr	r2, [pc, #316]	; (80031bc <HAL_GPIO_Init+0x338>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01f      	beq.n	80030c2 <HAL_GPIO_Init+0x23e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a4e      	ldr	r2, [pc, #312]	; (80031c0 <HAL_GPIO_Init+0x33c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d019      	beq.n	80030be <HAL_GPIO_Init+0x23a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a4d      	ldr	r2, [pc, #308]	; (80031c4 <HAL_GPIO_Init+0x340>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_GPIO_Init+0x236>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a4c      	ldr	r2, [pc, #304]	; (80031c8 <HAL_GPIO_Init+0x344>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00d      	beq.n	80030b6 <HAL_GPIO_Init+0x232>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a4b      	ldr	r2, [pc, #300]	; (80031cc <HAL_GPIO_Init+0x348>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <HAL_GPIO_Init+0x22e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a4a      	ldr	r2, [pc, #296]	; (80031d0 <HAL_GPIO_Init+0x34c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_GPIO_Init+0x22a>
 80030aa:	2306      	movs	r3, #6
 80030ac:	e00c      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030ae:	2307      	movs	r3, #7
 80030b0:	e00a      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030b2:	2305      	movs	r3, #5
 80030b4:	e008      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030b6:	2304      	movs	r3, #4
 80030b8:	e006      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030ba:	2303      	movs	r3, #3
 80030bc:	e004      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030be:	2302      	movs	r3, #2
 80030c0:	e002      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030c6:	2300      	movs	r3, #0
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	f002 0203 	and.w	r2, r2, #3
 80030ce:	0092      	lsls	r2, r2, #2
 80030d0:	4093      	lsls	r3, r2
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030d8:	4937      	ldr	r1, [pc, #220]	; (80031b8 <HAL_GPIO_Init+0x334>)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	3302      	adds	r3, #2
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030e6:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <HAL_GPIO_Init+0x350>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4013      	ands	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800310a:	4a32      	ldr	r2, [pc, #200]	; (80031d4 <HAL_GPIO_Init+0x350>)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003110:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <HAL_GPIO_Init+0x350>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	43db      	mvns	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003134:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <HAL_GPIO_Init+0x350>)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800313a:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <HAL_GPIO_Init+0x350>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_GPIO_Init+0x350>)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_GPIO_Init+0x350>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	43db      	mvns	r3, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003188:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <HAL_GPIO_Init+0x350>)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	3301      	adds	r3, #1
 8003192:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f47f ae78 	bne.w	8002e94 <HAL_GPIO_Init+0x10>
  }
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40010000 	.word	0x40010000
 80031bc:	48000400 	.word	0x48000400
 80031c0:	48000800 	.word	0x48000800
 80031c4:	48000c00 	.word	0x48000c00
 80031c8:	48001000 	.word	0x48001000
 80031cc:	48001400 	.word	0x48001400
 80031d0:	48001800 	.word	0x48001800
 80031d4:	40010400 	.word	0x40010400

080031d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
 80031e4:	4613      	mov	r3, r2
 80031e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e8:	787b      	ldrb	r3, [r7, #1]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031f4:	e002      	b.n	80031fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800321e:	4a05      	ldr	r2, [pc, #20]	; (8003234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f806 	bl	8003238 <HAL_GPIO_EXTI_Callback>
  }
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40010400 	.word	0x40010400

08003238 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800324e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003250:	b08f      	sub	sp, #60	; 0x3c
 8003252:	af0a      	add	r7, sp, #40	; 0x28
 8003254:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e116      	b.n	800348e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd ff08 	bl	8001090 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2203      	movs	r2, #3
 8003284:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f003 f9f5 	bl	800668e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	687e      	ldr	r6, [r7, #4]
 80032ac:	466d      	mov	r5, sp
 80032ae:	f106 0410 	add.w	r4, r6, #16
 80032b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032be:	e885 0003 	stmia.w	r5, {r0, r1}
 80032c2:	1d33      	adds	r3, r6, #4
 80032c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032c6:	6838      	ldr	r0, [r7, #0]
 80032c8:	f003 f9b5 	bl	8006636 <USB_CoreInit>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0d7      	b.n	800348e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f003 f9e3 	bl	80066b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	73fb      	strb	r3, [r7, #15]
 80032ee:	e04a      	b.n	8003386 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032f0:	7bfa      	ldrb	r2, [r7, #15]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	333d      	adds	r3, #61	; 0x3d
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	333c      	adds	r3, #60	; 0x3c
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	b298      	uxth	r0, r3
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	3342      	adds	r3, #66	; 0x42
 800332c:	4602      	mov	r2, r0
 800332e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003330:	7bfa      	ldrb	r2, [r7, #15]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	333f      	adds	r3, #63	; 0x3f
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	3344      	adds	r3, #68	; 0x44
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	3348      	adds	r3, #72	; 0x48
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800336c:	7bfa      	ldrb	r2, [r7, #15]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	3350      	adds	r3, #80	; 0x50
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	3301      	adds	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	429a      	cmp	r2, r3
 800338e:	d3af      	bcc.n	80032f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e044      	b.n	8003420 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033c2:	7bfa      	ldrb	r2, [r7, #15]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	3301      	adds	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
 8003420:	7bfa      	ldrb	r2, [r7, #15]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	429a      	cmp	r2, r3
 8003428:	d3b5      	bcc.n	8003396 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	687e      	ldr	r6, [r7, #4]
 8003432:	466d      	mov	r5, sp
 8003434:	f106 0410 	add.w	r4, r6, #16
 8003438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800343a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800343c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800343e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003440:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003444:	e885 0003 	stmia.w	r5, {r0, r1}
 8003448:	1d33      	adds	r3, r6, #4
 800344a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800344c:	6838      	ldr	r0, [r7, #0]
 800344e:	f003 f97b 	bl	8006748 <USB_DevInit>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e014      	b.n	800348e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	2b01      	cmp	r3, #1
 800347a:	d102      	bne.n	8003482 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f80a 	bl	8003496 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f003 fb23 	bl	8006ad2 <USB_DevDisconnect>

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003496 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c8:	f043 0303 	orr.w	r3, r3, #3
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a04      	ldr	r2, [pc, #16]	; (80034fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40007000 	.word	0x40007000

08003500 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <HAL_PWREx_GetVoltageRange+0x18>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40007000 	.word	0x40007000

0800351c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800352a:	d130      	bne.n	800358e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800352c:	4b23      	ldr	r3, [pc, #140]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003538:	d038      	beq.n	80035ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003542:	4a1e      	ldr	r2, [pc, #120]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003544:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003548:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800354a:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2232      	movs	r2, #50	; 0x32
 8003550:	fb02 f303 	mul.w	r3, r2, r3
 8003554:	4a1b      	ldr	r2, [pc, #108]	; (80035c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	0c9b      	lsrs	r3, r3, #18
 800355c:	3301      	adds	r3, #1
 800355e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003560:	e002      	b.n	8003568 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3b01      	subs	r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003568:	4b14      	ldr	r3, [pc, #80]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003574:	d102      	bne.n	800357c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f2      	bne.n	8003562 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800357c:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003588:	d110      	bne.n	80035ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e00f      	b.n	80035ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800358e:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359a:	d007      	beq.n	80035ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800359c:	4b07      	ldr	r3, [pc, #28]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035a4:	4a05      	ldr	r2, [pc, #20]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40007000 	.word	0x40007000
 80035c0:	20000000 	.word	0x20000000
 80035c4:	431bde83 	.word	0x431bde83

080035c8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4a04      	ldr	r2, [pc, #16]	; (80035e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80035d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035d6:	6053      	str	r3, [r2, #4]
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40007000 	.word	0x40007000

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e3d4      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fa:	4ba1      	ldr	r3, [pc, #644]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003604:	4b9e      	ldr	r3, [pc, #632]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 80e4 	beq.w	80037e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <HAL_RCC_OscConfig+0x4a>
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b0c      	cmp	r3, #12
 8003626:	f040 808b 	bne.w	8003740 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b01      	cmp	r3, #1
 800362e:	f040 8087 	bne.w	8003740 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003632:	4b93      	ldr	r3, [pc, #588]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_RCC_OscConfig+0x62>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e3ac      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1a      	ldr	r2, [r3, #32]
 800364e:	4b8c      	ldr	r3, [pc, #560]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d004      	beq.n	8003664 <HAL_RCC_OscConfig+0x7c>
 800365a:	4b89      	ldr	r3, [pc, #548]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003662:	e005      	b.n	8003670 <HAL_RCC_OscConfig+0x88>
 8003664:	4b86      	ldr	r3, [pc, #536]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003670:	4293      	cmp	r3, r2
 8003672:	d223      	bcs.n	80036bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fd41 	bl	8004100 <RCC_SetFlashLatencyFromMSIRange>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e38d      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003688:	4b7d      	ldr	r3, [pc, #500]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a7c      	ldr	r2, [pc, #496]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 800368e:	f043 0308 	orr.w	r3, r3, #8
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	4b7a      	ldr	r3, [pc, #488]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4977      	ldr	r1, [pc, #476]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036a6:	4b76      	ldr	r3, [pc, #472]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	4972      	ldr	r1, [pc, #456]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	604b      	str	r3, [r1, #4]
 80036ba:	e025      	b.n	8003708 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036bc:	4b70      	ldr	r3, [pc, #448]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a6f      	ldr	r2, [pc, #444]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 80036c2:	f043 0308 	orr.w	r3, r3, #8
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b6d      	ldr	r3, [pc, #436]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	496a      	ldr	r1, [pc, #424]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036da:	4b69      	ldr	r3, [pc, #420]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	4965      	ldr	r1, [pc, #404]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d109      	bne.n	8003708 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fd01 	bl	8004100 <RCC_SetFlashLatencyFromMSIRange>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e34d      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003708:	f000 fc36 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b5c      	ldr	r3, [pc, #368]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	495a      	ldr	r1, [pc, #360]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
 8003724:	4a58      	ldr	r2, [pc, #352]	; (8003888 <HAL_RCC_OscConfig+0x2a0>)
 8003726:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003728:	4b58      	ldr	r3, [pc, #352]	; (800388c <HAL_RCC_OscConfig+0x2a4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fe03 	bl	8001338 <HAL_InitTick>
 8003732:	4603      	mov	r3, r0
 8003734:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d052      	beq.n	80037e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	e331      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d032      	beq.n	80037ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003748:	4b4d      	ldr	r3, [pc, #308]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a4c      	ldr	r2, [pc, #304]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003754:	f7fd fe40 	bl	80013d8 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800375c:	f7fd fe3c 	bl	80013d8 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e31a      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800376e:	4b44      	ldr	r3, [pc, #272]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800377a:	4b41      	ldr	r3, [pc, #260]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a40      	ldr	r2, [pc, #256]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003780:	f043 0308 	orr.w	r3, r3, #8
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b3e      	ldr	r3, [pc, #248]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	493b      	ldr	r1, [pc, #236]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003798:	4b39      	ldr	r3, [pc, #228]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	4936      	ldr	r1, [pc, #216]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
 80037ac:	e01a      	b.n	80037e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037ae:	4b34      	ldr	r3, [pc, #208]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a33      	ldr	r2, [pc, #204]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037ba:	f7fd fe0d 	bl	80013d8 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037c2:	f7fd fe09 	bl	80013d8 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e2e7      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037d4:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f0      	bne.n	80037c2 <HAL_RCC_OscConfig+0x1da>
 80037e0:	e000      	b.n	80037e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d074      	beq.n	80038da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d005      	beq.n	8003802 <HAL_RCC_OscConfig+0x21a>
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	d10e      	bne.n	800381a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d10b      	bne.n	800381a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003802:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d064      	beq.n	80038d8 <HAL_RCC_OscConfig+0x2f0>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d160      	bne.n	80038d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e2c4      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003822:	d106      	bne.n	8003832 <HAL_RCC_OscConfig+0x24a>
 8003824:	4b16      	ldr	r3, [pc, #88]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a15      	ldr	r2, [pc, #84]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 800382a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	e01d      	b.n	800386e <HAL_RCC_OscConfig+0x286>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800383a:	d10c      	bne.n	8003856 <HAL_RCC_OscConfig+0x26e>
 800383c:	4b10      	ldr	r3, [pc, #64]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a0f      	ldr	r2, [pc, #60]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a0c      	ldr	r2, [pc, #48]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 800384e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e00b      	b.n	800386e <HAL_RCC_OscConfig+0x286>
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a09      	ldr	r2, [pc, #36]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 800385c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a06      	ldr	r2, [pc, #24]	; (8003880 <HAL_RCC_OscConfig+0x298>)
 8003868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d01c      	beq.n	80038b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fd fdaf 	bl	80013d8 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800387c:	e011      	b.n	80038a2 <HAL_RCC_OscConfig+0x2ba>
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	08007474 	.word	0x08007474
 8003888:	20000000 	.word	0x20000000
 800388c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003890:	f7fd fda2 	bl	80013d8 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e280      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a2:	4baf      	ldr	r3, [pc, #700]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x2a8>
 80038ae:	e014      	b.n	80038da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fd fd92 	bl	80013d8 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b8:	f7fd fd8e 	bl	80013d8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e26c      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ca:	4ba5      	ldr	r3, [pc, #660]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x2d0>
 80038d6:	e000      	b.n	80038da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d060      	beq.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_OscConfig+0x310>
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2b0c      	cmp	r3, #12
 80038f0:	d119      	bne.n	8003926 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d116      	bne.n	8003926 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038f8:	4b99      	ldr	r3, [pc, #612]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_OscConfig+0x328>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e249      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003910:	4b93      	ldr	r3, [pc, #588]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	4990      	ldr	r1, [pc, #576]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003924:	e040      	b.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d023      	beq.n	8003976 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800392e:	4b8c      	ldr	r3, [pc, #560]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a8b      	ldr	r2, [pc, #556]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393a:	f7fd fd4d 	bl	80013d8 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003942:	f7fd fd49 	bl	80013d8 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e227      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003954:	4b82      	ldr	r3, [pc, #520]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003960:	4b7f      	ldr	r3, [pc, #508]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	061b      	lsls	r3, r3, #24
 800396e:	497c      	ldr	r1, [pc, #496]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003970:	4313      	orrs	r3, r2
 8003972:	604b      	str	r3, [r1, #4]
 8003974:	e018      	b.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003976:	4b7a      	ldr	r3, [pc, #488]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a79      	ldr	r2, [pc, #484]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 800397c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fd fd29 	bl	80013d8 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800398a:	f7fd fd25 	bl	80013d8 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e203      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800399c:	4b70      	ldr	r3, [pc, #448]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f0      	bne.n	800398a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d03c      	beq.n	8003a2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01c      	beq.n	80039f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039bc:	4b68      	ldr	r3, [pc, #416]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80039be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c2:	4a67      	ldr	r2, [pc, #412]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fd fd04 	bl	80013d8 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d4:	f7fd fd00 	bl	80013d8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e1de      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e6:	4b5e      	ldr	r3, [pc, #376]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80039e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0ef      	beq.n	80039d4 <HAL_RCC_OscConfig+0x3ec>
 80039f4:	e01b      	b.n	8003a2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f6:	4b5a      	ldr	r3, [pc, #360]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80039f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fc:	4a58      	ldr	r2, [pc, #352]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a06:	f7fd fce7 	bl	80013d8 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0e:	f7fd fce3 	bl	80013d8 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e1c1      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a20:	4b4f      	ldr	r3, [pc, #316]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1ef      	bne.n	8003a0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80a6 	beq.w	8003b88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a40:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10d      	bne.n	8003a68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4c:	4b44      	ldr	r3, [pc, #272]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	4a43      	ldr	r2, [pc, #268]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a56:	6593      	str	r3, [r2, #88]	; 0x58
 8003a58:	4b41      	ldr	r3, [pc, #260]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a64:	2301      	movs	r3, #1
 8003a66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a68:	4b3e      	ldr	r3, [pc, #248]	; (8003b64 <HAL_RCC_OscConfig+0x57c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d118      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a74:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <HAL_RCC_OscConfig+0x57c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a3a      	ldr	r2, [pc, #232]	; (8003b64 <HAL_RCC_OscConfig+0x57c>)
 8003a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a80:	f7fd fcaa 	bl	80013d8 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a88:	f7fd fca6 	bl	80013d8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e184      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a9a:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <HAL_RCC_OscConfig+0x57c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d108      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x4d8>
 8003aae:	4b2c      	ldr	r3, [pc, #176]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	4a2a      	ldr	r2, [pc, #168]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003abe:	e024      	b.n	8003b0a <HAL_RCC_OscConfig+0x522>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b05      	cmp	r3, #5
 8003ac6:	d110      	bne.n	8003aea <HAL_RCC_OscConfig+0x502>
 8003ac8:	4b25      	ldr	r3, [pc, #148]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	4a24      	ldr	r2, [pc, #144]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003ad0:	f043 0304 	orr.w	r3, r3, #4
 8003ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad8:	4b21      	ldr	r3, [pc, #132]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae8:	e00f      	b.n	8003b0a <HAL_RCC_OscConfig+0x522>
 8003aea:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af0:	4a1b      	ldr	r2, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003af2:	f023 0301 	bic.w	r3, r3, #1
 8003af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003afa:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b00:	4a17      	ldr	r2, [pc, #92]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003b02:	f023 0304 	bic.w	r3, r3, #4
 8003b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d016      	beq.n	8003b40 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b12:	f7fd fc61 	bl	80013d8 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b18:	e00a      	b.n	8003b30 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1a:	f7fd fc5d 	bl	80013d8 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e139      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0ed      	beq.n	8003b1a <HAL_RCC_OscConfig+0x532>
 8003b3e:	e01a      	b.n	8003b76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fd fc4a 	bl	80013d8 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b46:	e00f      	b.n	8003b68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b48:	f7fd fc46 	bl	80013d8 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d906      	bls.n	8003b68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e122      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b68:	4b90      	ldr	r3, [pc, #576]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e8      	bne.n	8003b48 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b76:	7ffb      	ldrb	r3, [r7, #31]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d105      	bne.n	8003b88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b7c:	4b8b      	ldr	r3, [pc, #556]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	4a8a      	ldr	r2, [pc, #552]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8108 	beq.w	8003da2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	f040 80d0 	bne.w	8003d3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b9c:	4b83      	ldr	r3, [pc, #524]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f003 0203 	and.w	r2, r3, #3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d130      	bne.n	8003c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d127      	bne.n	8003c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d11f      	bne.n	8003c12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bdc:	2a07      	cmp	r2, #7
 8003bde:	bf14      	ite	ne
 8003be0:	2201      	movne	r2, #1
 8003be2:	2200      	moveq	r2, #0
 8003be4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d113      	bne.n	8003c12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d109      	bne.n	8003c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d06e      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b0c      	cmp	r3, #12
 8003c16:	d069      	beq.n	8003cec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c18:	4b64      	ldr	r3, [pc, #400]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d105      	bne.n	8003c30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c24:	4b61      	ldr	r3, [pc, #388]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0b7      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c34:	4b5d      	ldr	r3, [pc, #372]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a5c      	ldr	r2, [pc, #368]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c40:	f7fd fbca 	bl	80013d8 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fd fbc6 	bl	80013d8 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e0a4      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c5a:	4b54      	ldr	r3, [pc, #336]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c66:	4b51      	ldr	r3, [pc, #324]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	4b51      	ldr	r3, [pc, #324]	; (8003db0 <HAL_RCC_OscConfig+0x7c8>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c76:	3a01      	subs	r2, #1
 8003c78:	0112      	lsls	r2, r2, #4
 8003c7a:	4311      	orrs	r1, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c80:	0212      	lsls	r2, r2, #8
 8003c82:	4311      	orrs	r1, r2
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c88:	0852      	lsrs	r2, r2, #1
 8003c8a:	3a01      	subs	r2, #1
 8003c8c:	0552      	lsls	r2, r2, #21
 8003c8e:	4311      	orrs	r1, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c94:	0852      	lsrs	r2, r2, #1
 8003c96:	3a01      	subs	r2, #1
 8003c98:	0652      	lsls	r2, r2, #25
 8003c9a:	4311      	orrs	r1, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ca0:	0912      	lsrs	r2, r2, #4
 8003ca2:	0452      	lsls	r2, r2, #17
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	4941      	ldr	r1, [pc, #260]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cac:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a3e      	ldr	r2, [pc, #248]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cb8:	4b3c      	ldr	r3, [pc, #240]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4a3b      	ldr	r2, [pc, #236]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cc4:	f7fd fb88 	bl	80013d8 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fd fb84 	bl	80013d8 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e062      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cde:	4b33      	ldr	r3, [pc, #204]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cea:	e05a      	b.n	8003da2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e059      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf0:	4b2e      	ldr	r3, [pc, #184]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d152      	bne.n	8003da2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a2a      	ldr	r2, [pc, #168]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d08:	4b28      	ldr	r3, [pc, #160]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4a27      	ldr	r2, [pc, #156]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d14:	f7fd fb60 	bl	80013d8 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fd fb5c 	bl	80013d8 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e03a      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2e:	4b1f      	ldr	r3, [pc, #124]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x734>
 8003d3a:	e032      	b.n	8003da2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d02d      	beq.n	8003d9e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a19      	ldr	r2, [pc, #100]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003d48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d4c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d4e:	4b17      	ldr	r3, [pc, #92]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d105      	bne.n	8003d66 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d5a:	4b14      	ldr	r3, [pc, #80]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	4a13      	ldr	r2, [pc, #76]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003d60:	f023 0303 	bic.w	r3, r3, #3
 8003d64:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003d6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fd fb2f 	bl	80013d8 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fd fb2b 	bl	80013d8 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e009      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_RCC_OscConfig+0x7c4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f0      	bne.n	8003d7e <HAL_RCC_OscConfig+0x796>
 8003d9c:	e001      	b.n	8003da2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3720      	adds	r7, #32
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000
 8003db0:	f99d808c 	.word	0xf99d808c

08003db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0c8      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b66      	ldr	r3, [pc, #408]	; (8003f64 <HAL_RCC_ClockConfig+0x1b0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d910      	bls.n	8003df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_RCC_ClockConfig+0x1b0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 0207 	bic.w	r2, r3, #7
 8003dde:	4961      	ldr	r1, [pc, #388]	; (8003f64 <HAL_RCC_ClockConfig+0x1b0>)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b5f      	ldr	r3, [pc, #380]	; (8003f64 <HAL_RCC_ClockConfig+0x1b0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0b0      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d04c      	beq.n	8003e9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0c:	4b56      	ldr	r3, [pc, #344]	; (8003f68 <HAL_RCC_ClockConfig+0x1b4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d121      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e09e      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e24:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <HAL_RCC_ClockConfig+0x1b4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d115      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e092      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d107      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e3c:	4b4a      	ldr	r3, [pc, #296]	; (8003f68 <HAL_RCC_ClockConfig+0x1b4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e086      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e4c:	4b46      	ldr	r3, [pc, #280]	; (8003f68 <HAL_RCC_ClockConfig+0x1b4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e07e      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e5c:	4b42      	ldr	r3, [pc, #264]	; (8003f68 <HAL_RCC_ClockConfig+0x1b4>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 0203 	bic.w	r2, r3, #3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	493f      	ldr	r1, [pc, #252]	; (8003f68 <HAL_RCC_ClockConfig+0x1b4>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6e:	f7fd fab3 	bl	80013d8 <HAL_GetTick>
 8003e72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e76:	f7fd faaf 	bl	80013d8 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e066      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8c:	4b36      	ldr	r3, [pc, #216]	; (8003f68 <HAL_RCC_ClockConfig+0x1b4>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 020c 	and.w	r2, r3, #12
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d1eb      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d008      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eaa:	4b2f      	ldr	r3, [pc, #188]	; (8003f68 <HAL_RCC_ClockConfig+0x1b4>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	492c      	ldr	r1, [pc, #176]	; (8003f68 <HAL_RCC_ClockConfig+0x1b4>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b29      	ldr	r3, [pc, #164]	; (8003f64 <HAL_RCC_ClockConfig+0x1b0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d210      	bcs.n	8003eec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <HAL_RCC_ClockConfig+0x1b0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 0207 	bic.w	r2, r3, #7
 8003ed2:	4924      	ldr	r1, [pc, #144]	; (8003f64 <HAL_RCC_ClockConfig+0x1b0>)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <HAL_RCC_ClockConfig+0x1b0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e036      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_RCC_ClockConfig+0x1b4>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4918      	ldr	r1, [pc, #96]	; (8003f68 <HAL_RCC_ClockConfig+0x1b4>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f16:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <HAL_RCC_ClockConfig+0x1b4>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4910      	ldr	r1, [pc, #64]	; (8003f68 <HAL_RCC_ClockConfig+0x1b4>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f2a:	f000 f825 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <HAL_RCC_ClockConfig+0x1b4>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	490c      	ldr	r1, [pc, #48]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003f3c:	5ccb      	ldrb	r3, [r1, r3]
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	fa22 f303 	lsr.w	r3, r2, r3
 8003f46:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fd f9f2 	bl	8001338 <HAL_InitTick>
 8003f54:	4603      	mov	r3, r0
 8003f56:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f58:	7afb      	ldrb	r3, [r7, #11]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40022000 	.word	0x40022000
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	08007474 	.word	0x08007474
 8003f70:	20000000 	.word	0x20000000
 8003f74:	20000004 	.word	0x20000004

08003f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	; 0x24
 8003f7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f86:	4b3e      	ldr	r3, [pc, #248]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f90:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0x34>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	d121      	bne.n	8003fea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d11e      	bne.n	8003fea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fac:	4b34      	ldr	r3, [pc, #208]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fb8:	4b31      	ldr	r3, [pc, #196]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fc8:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fd4:	4a2b      	ldr	r2, [pc, #172]	; (8004084 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10d      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d102      	bne.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ff0:	4b25      	ldr	r3, [pc, #148]	; (8004088 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e004      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ffc:	4b23      	ldr	r3, [pc, #140]	; (800408c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ffe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d134      	bne.n	8004070 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004006:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d003      	beq.n	800401e <HAL_RCC_GetSysClockFreq+0xa6>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b03      	cmp	r3, #3
 800401a:	d003      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0xac>
 800401c:	e005      	b.n	800402a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800401e:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <HAL_RCC_GetSysClockFreq+0x110>)
 8004020:	617b      	str	r3, [r7, #20]
      break;
 8004022:	e005      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004024:	4b19      	ldr	r3, [pc, #100]	; (800408c <HAL_RCC_GetSysClockFreq+0x114>)
 8004026:	617b      	str	r3, [r7, #20]
      break;
 8004028:	e002      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	617b      	str	r3, [r7, #20]
      break;
 800402e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	3301      	adds	r3, #1
 800403c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	fb02 f203 	mul.w	r2, r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	0e5b      	lsrs	r3, r3, #25
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	3301      	adds	r3, #1
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004070:	69bb      	ldr	r3, [r7, #24]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3724      	adds	r7, #36	; 0x24
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
 8004084:	0800748c 	.word	0x0800748c
 8004088:	00f42400 	.word	0x00f42400
 800408c:	007a1200 	.word	0x007a1200

08004090 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000000 	.word	0x20000000

080040a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040ac:	f7ff fff0 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4904      	ldr	r1, [pc, #16]	; (80040d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000
 80040d0:	08007484 	.word	0x08007484

080040d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040d8:	f7ff ffda 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	0adb      	lsrs	r3, r3, #11
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	4904      	ldr	r1, [pc, #16]	; (80040fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ea:	5ccb      	ldrb	r3, [r1, r3]
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000
 80040fc:	08007484 	.word	0x08007484

08004100 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004108:	2300      	movs	r3, #0
 800410a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800410c:	4b2a      	ldr	r3, [pc, #168]	; (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004118:	f7ff f9f2 	bl	8003500 <HAL_PWREx_GetVoltageRange>
 800411c:	6178      	str	r0, [r7, #20]
 800411e:	e014      	b.n	800414a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004120:	4b25      	ldr	r3, [pc, #148]	; (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	4a24      	ldr	r2, [pc, #144]	; (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412a:	6593      	str	r3, [r2, #88]	; 0x58
 800412c:	4b22      	ldr	r3, [pc, #136]	; (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004138:	f7ff f9e2 	bl	8003500 <HAL_PWREx_GetVoltageRange>
 800413c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004148:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004150:	d10b      	bne.n	800416a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b80      	cmp	r3, #128	; 0x80
 8004156:	d919      	bls.n	800418c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2ba0      	cmp	r3, #160	; 0xa0
 800415c:	d902      	bls.n	8004164 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800415e:	2302      	movs	r3, #2
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	e013      	b.n	800418c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004164:	2301      	movs	r3, #1
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	e010      	b.n	800418c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b80      	cmp	r3, #128	; 0x80
 800416e:	d902      	bls.n	8004176 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004170:	2303      	movs	r3, #3
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	e00a      	b.n	800418c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b80      	cmp	r3, #128	; 0x80
 800417a:	d102      	bne.n	8004182 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800417c:	2302      	movs	r3, #2
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	e004      	b.n	800418c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b70      	cmp	r3, #112	; 0x70
 8004186:	d101      	bne.n	800418c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004188:	2301      	movs	r3, #1
 800418a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 0207 	bic.w	r2, r3, #7
 8004194:	4909      	ldr	r1, [pc, #36]	; (80041bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800419c:	4b07      	ldr	r3, [pc, #28]	; (80041bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d001      	beq.n	80041ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40022000 	.word	0x40022000

080041c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041c8:	2300      	movs	r3, #0
 80041ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041cc:	2300      	movs	r3, #0
 80041ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d041      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041e4:	d02a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041ea:	d824      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041f0:	d008      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041f6:	d81e      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004200:	d010      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004202:	e018      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004204:	4b86      	ldr	r3, [pc, #536]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4a85      	ldr	r2, [pc, #532]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004210:	e015      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3304      	adds	r3, #4
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f000 facb 	bl	80047b4 <RCCEx_PLLSAI1_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004222:	e00c      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3320      	adds	r3, #32
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fbb6 	bl	800499c <RCCEx_PLLSAI2_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004234:	e003      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	74fb      	strb	r3, [r7, #19]
      break;
 800423a:	e000      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800423c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800423e:	7cfb      	ldrb	r3, [r7, #19]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004244:	4b76      	ldr	r3, [pc, #472]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004252:	4973      	ldr	r1, [pc, #460]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800425a:	e001      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d041      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004270:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004274:	d02a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004276:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800427a:	d824      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800427c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004280:	d008      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004286:	d81e      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800428c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004290:	d010      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004292:	e018      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004294:	4b62      	ldr	r3, [pc, #392]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a61      	ldr	r2, [pc, #388]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042a0:	e015      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3304      	adds	r3, #4
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fa83 	bl	80047b4 <RCCEx_PLLSAI1_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042b2:	e00c      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3320      	adds	r3, #32
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fb6e 	bl	800499c <RCCEx_PLLSAI2_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042c4:	e003      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	74fb      	strb	r3, [r7, #19]
      break;
 80042ca:	e000      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80042cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ce:	7cfb      	ldrb	r3, [r7, #19]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10b      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042d4:	4b52      	ldr	r3, [pc, #328]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e2:	494f      	ldr	r1, [pc, #316]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042ea:	e001      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ec:	7cfb      	ldrb	r3, [r7, #19]
 80042ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80a0 	beq.w	800443e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004302:	4b47      	ldr	r3, [pc, #284]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004312:	2300      	movs	r3, #0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00d      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004318:	4b41      	ldr	r3, [pc, #260]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431c:	4a40      	ldr	r2, [pc, #256]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004322:	6593      	str	r3, [r2, #88]	; 0x58
 8004324:	4b3e      	ldr	r3, [pc, #248]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004330:	2301      	movs	r3, #1
 8004332:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004334:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a3a      	ldr	r2, [pc, #232]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800433a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004340:	f7fd f84a 	bl	80013d8 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004346:	e009      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004348:	f7fd f846 	bl	80013d8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d902      	bls.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	74fb      	strb	r3, [r7, #19]
        break;
 800435a:	e005      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800435c:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ef      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d15c      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800436e:	4b2c      	ldr	r3, [pc, #176]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004378:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01f      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	429a      	cmp	r2, r3
 800438a:	d019      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800438c:	4b24      	ldr	r3, [pc, #144]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004396:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004398:	4b21      	ldr	r3, [pc, #132]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	4a20      	ldr	r2, [pc, #128]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043a8:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ae:	4a1c      	ldr	r2, [pc, #112]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043b8:	4a19      	ldr	r2, [pc, #100]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ca:	f7fd f805 	bl	80013d8 <HAL_GetTick>
 80043ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d0:	e00b      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fd f801 	bl	80013d8 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d902      	bls.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	74fb      	strb	r3, [r7, #19]
            break;
 80043e8:	e006      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ec      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80043f8:	7cfb      	ldrb	r3, [r7, #19]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10c      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440e:	4904      	ldr	r1, [pc, #16]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004416:	e009      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004418:	7cfb      	ldrb	r3, [r7, #19]
 800441a:	74bb      	strb	r3, [r7, #18]
 800441c:	e006      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000
 8004424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004428:	7cfb      	ldrb	r3, [r7, #19]
 800442a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800442c:	7c7b      	ldrb	r3, [r7, #17]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d105      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004432:	4b9e      	ldr	r3, [pc, #632]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004436:	4a9d      	ldr	r2, [pc, #628]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800444a:	4b98      	ldr	r3, [pc, #608]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	f023 0203 	bic.w	r2, r3, #3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	4994      	ldr	r1, [pc, #592]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800446c:	4b8f      	ldr	r3, [pc, #572]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004472:	f023 020c 	bic.w	r2, r3, #12
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	498c      	ldr	r1, [pc, #560]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800448e:	4b87      	ldr	r3, [pc, #540]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	4983      	ldr	r1, [pc, #524]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044b0:	4b7e      	ldr	r3, [pc, #504]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	497b      	ldr	r1, [pc, #492]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044d2:	4b76      	ldr	r3, [pc, #472]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e0:	4972      	ldr	r1, [pc, #456]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044f4:	4b6d      	ldr	r3, [pc, #436]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004502:	496a      	ldr	r1, [pc, #424]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004516:	4b65      	ldr	r3, [pc, #404]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004524:	4961      	ldr	r1, [pc, #388]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004538:	4b5c      	ldr	r3, [pc, #368]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004546:	4959      	ldr	r1, [pc, #356]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800455a:	4b54      	ldr	r3, [pc, #336]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004560:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004568:	4950      	ldr	r1, [pc, #320]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800457c:	4b4b      	ldr	r3, [pc, #300]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	4948      	ldr	r1, [pc, #288]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800459e:	4b43      	ldr	r3, [pc, #268]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	493f      	ldr	r1, [pc, #252]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d028      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045c0:	4b3a      	ldr	r3, [pc, #232]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ce:	4937      	ldr	r1, [pc, #220]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045de:	d106      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e0:	4b32      	ldr	r3, [pc, #200]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4a31      	ldr	r2, [pc, #196]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ea:	60d3      	str	r3, [r2, #12]
 80045ec:	e011      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045f6:	d10c      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	2101      	movs	r1, #1
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 f8d8 	bl	80047b4 <RCCEx_PLLSAI1_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800460e:	7cfb      	ldrb	r3, [r7, #19]
 8004610:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d028      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800461e:	4b23      	ldr	r3, [pc, #140]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	491f      	ldr	r1, [pc, #124]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463c:	d106      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800463e:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	4a1a      	ldr	r2, [pc, #104]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004648:	60d3      	str	r3, [r2, #12]
 800464a:	e011      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004654:	d10c      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3304      	adds	r3, #4
 800465a:	2101      	movs	r1, #1
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f8a9 	bl	80047b4 <RCCEx_PLLSAI1_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d02b      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468a:	4908      	ldr	r1, [pc, #32]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004696:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800469a:	d109      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800469c:	4b03      	ldr	r3, [pc, #12]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a02      	ldr	r2, [pc, #8]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046a6:	60d3      	str	r3, [r2, #12]
 80046a8:	e014      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80046aa:	bf00      	nop
 80046ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3304      	adds	r3, #4
 80046be:	2101      	movs	r1, #1
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 f877 	bl	80047b4 <RCCEx_PLLSAI1_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ca:	7cfb      	ldrb	r3, [r7, #19]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d02f      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046e0:	4b2b      	ldr	r3, [pc, #172]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ee:	4928      	ldr	r1, [pc, #160]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046fe:	d10d      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3304      	adds	r3, #4
 8004704:	2102      	movs	r1, #2
 8004706:	4618      	mov	r0, r3
 8004708:	f000 f854 	bl	80047b4 <RCCEx_PLLSAI1_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d014      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004716:	7cfb      	ldrb	r3, [r7, #19]
 8004718:	74bb      	strb	r3, [r7, #18]
 800471a:	e011      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004724:	d10c      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3320      	adds	r3, #32
 800472a:	2102      	movs	r1, #2
 800472c:	4618      	mov	r0, r3
 800472e:	f000 f935 	bl	800499c <RCCEx_PLLSAI2_Config>
 8004732:	4603      	mov	r3, r0
 8004734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004736:	7cfb      	ldrb	r3, [r7, #19]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800474c:	4b10      	ldr	r3, [pc, #64]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800475a:	490d      	ldr	r1, [pc, #52]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800476e:	4b08      	ldr	r3, [pc, #32]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800477e:	4904      	ldr	r1, [pc, #16]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004786:	7cbb      	ldrb	r3, [r7, #18]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40021000 	.word	0x40021000

08004794 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800479e:	f043 0304 	orr.w	r3, r3, #4
 80047a2:	6013      	str	r3, [r2, #0]
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000

080047b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047c2:	4b75      	ldr	r3, [pc, #468]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d018      	beq.n	8004800 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047ce:	4b72      	ldr	r3, [pc, #456]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f003 0203 	and.w	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d10d      	bne.n	80047fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
       ||
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047e6:	4b6c      	ldr	r3, [pc, #432]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	091b      	lsrs	r3, r3, #4
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
       ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d047      	beq.n	800488a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	73fb      	strb	r3, [r7, #15]
 80047fe:	e044      	b.n	800488a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d018      	beq.n	800483a <RCCEx_PLLSAI1_Config+0x86>
 8004808:	2b03      	cmp	r3, #3
 800480a:	d825      	bhi.n	8004858 <RCCEx_PLLSAI1_Config+0xa4>
 800480c:	2b01      	cmp	r3, #1
 800480e:	d002      	beq.n	8004816 <RCCEx_PLLSAI1_Config+0x62>
 8004810:	2b02      	cmp	r3, #2
 8004812:	d009      	beq.n	8004828 <RCCEx_PLLSAI1_Config+0x74>
 8004814:	e020      	b.n	8004858 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004816:	4b60      	ldr	r3, [pc, #384]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d11d      	bne.n	800485e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004826:	e01a      	b.n	800485e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004828:	4b5b      	ldr	r3, [pc, #364]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004830:	2b00      	cmp	r3, #0
 8004832:	d116      	bne.n	8004862 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004838:	e013      	b.n	8004862 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800483a:	4b57      	ldr	r3, [pc, #348]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10f      	bne.n	8004866 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004846:	4b54      	ldr	r3, [pc, #336]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004856:	e006      	b.n	8004866 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
      break;
 800485c:	e004      	b.n	8004868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800485e:	bf00      	nop
 8004860:	e002      	b.n	8004868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004862:	bf00      	nop
 8004864:	e000      	b.n	8004868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004866:	bf00      	nop
    }

    if(status == HAL_OK)
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10d      	bne.n	800488a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800486e:	4b4a      	ldr	r3, [pc, #296]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6819      	ldr	r1, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	3b01      	subs	r3, #1
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	430b      	orrs	r3, r1
 8004884:	4944      	ldr	r1, [pc, #272]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004886:	4313      	orrs	r3, r2
 8004888:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d17d      	bne.n	800498c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004890:	4b41      	ldr	r3, [pc, #260]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a40      	ldr	r2, [pc, #256]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004896:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800489a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489c:	f7fc fd9c 	bl	80013d8 <HAL_GetTick>
 80048a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048a2:	e009      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048a4:	f7fc fd98 	bl	80013d8 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d902      	bls.n	80048b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	73fb      	strb	r3, [r7, #15]
        break;
 80048b6:	e005      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048b8:	4b37      	ldr	r3, [pc, #220]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1ef      	bne.n	80048a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d160      	bne.n	800498c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d111      	bne.n	80048f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048d0:	4b31      	ldr	r3, [pc, #196]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6892      	ldr	r2, [r2, #8]
 80048e0:	0211      	lsls	r1, r2, #8
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	68d2      	ldr	r2, [r2, #12]
 80048e6:	0912      	lsrs	r2, r2, #4
 80048e8:	0452      	lsls	r2, r2, #17
 80048ea:	430a      	orrs	r2, r1
 80048ec:	492a      	ldr	r1, [pc, #168]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	610b      	str	r3, [r1, #16]
 80048f2:	e027      	b.n	8004944 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d112      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048fa:	4b27      	ldr	r3, [pc, #156]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004902:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6892      	ldr	r2, [r2, #8]
 800490a:	0211      	lsls	r1, r2, #8
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6912      	ldr	r2, [r2, #16]
 8004910:	0852      	lsrs	r2, r2, #1
 8004912:	3a01      	subs	r2, #1
 8004914:	0552      	lsls	r2, r2, #21
 8004916:	430a      	orrs	r2, r1
 8004918:	491f      	ldr	r1, [pc, #124]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800491a:	4313      	orrs	r3, r2
 800491c:	610b      	str	r3, [r1, #16]
 800491e:	e011      	b.n	8004944 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004920:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004928:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6892      	ldr	r2, [r2, #8]
 8004930:	0211      	lsls	r1, r2, #8
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6952      	ldr	r2, [r2, #20]
 8004936:	0852      	lsrs	r2, r2, #1
 8004938:	3a01      	subs	r2, #1
 800493a:	0652      	lsls	r2, r2, #25
 800493c:	430a      	orrs	r2, r1
 800493e:	4916      	ldr	r1, [pc, #88]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004940:	4313      	orrs	r3, r2
 8004942:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004944:	4b14      	ldr	r3, [pc, #80]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a13      	ldr	r2, [pc, #76]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800494a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800494e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fc fd42 	bl	80013d8 <HAL_GetTick>
 8004954:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004956:	e009      	b.n	800496c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004958:	f7fc fd3e 	bl	80013d8 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d902      	bls.n	800496c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	73fb      	strb	r3, [r7, #15]
          break;
 800496a:	e005      	b.n	8004978 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ef      	beq.n	8004958 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	4904      	ldr	r1, [pc, #16]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004988:	4313      	orrs	r3, r2
 800498a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000

0800499c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049aa:	4b6a      	ldr	r3, [pc, #424]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d018      	beq.n	80049e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049b6:	4b67      	ldr	r3, [pc, #412]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0203 	and.w	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d10d      	bne.n	80049e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
       ||
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049ce:	4b61      	ldr	r3, [pc, #388]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
       ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d047      	beq.n	8004a72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	73fb      	strb	r3, [r7, #15]
 80049e6:	e044      	b.n	8004a72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d018      	beq.n	8004a22 <RCCEx_PLLSAI2_Config+0x86>
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d825      	bhi.n	8004a40 <RCCEx_PLLSAI2_Config+0xa4>
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d002      	beq.n	80049fe <RCCEx_PLLSAI2_Config+0x62>
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d009      	beq.n	8004a10 <RCCEx_PLLSAI2_Config+0x74>
 80049fc:	e020      	b.n	8004a40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049fe:	4b55      	ldr	r3, [pc, #340]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d11d      	bne.n	8004a46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a0e:	e01a      	b.n	8004a46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a10:	4b50      	ldr	r3, [pc, #320]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d116      	bne.n	8004a4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a20:	e013      	b.n	8004a4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a22:	4b4c      	ldr	r3, [pc, #304]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a2e:	4b49      	ldr	r3, [pc, #292]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a3e:	e006      	b.n	8004a4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
      break;
 8004a44:	e004      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a46:	bf00      	nop
 8004a48:	e002      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e000      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10d      	bne.n	8004a72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a56:	4b3f      	ldr	r3, [pc, #252]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6819      	ldr	r1, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	4939      	ldr	r1, [pc, #228]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d167      	bne.n	8004b48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a78:	4b36      	ldr	r3, [pc, #216]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a35      	ldr	r2, [pc, #212]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a84:	f7fc fca8 	bl	80013d8 <HAL_GetTick>
 8004a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a8a:	e009      	b.n	8004aa0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a8c:	f7fc fca4 	bl	80013d8 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d902      	bls.n	8004aa0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a9e:	e005      	b.n	8004aac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aa0:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1ef      	bne.n	8004a8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d14a      	bne.n	8004b48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d111      	bne.n	8004adc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ab8:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6892      	ldr	r2, [r2, #8]
 8004ac8:	0211      	lsls	r1, r2, #8
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68d2      	ldr	r2, [r2, #12]
 8004ace:	0912      	lsrs	r2, r2, #4
 8004ad0:	0452      	lsls	r2, r2, #17
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	491f      	ldr	r1, [pc, #124]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	614b      	str	r3, [r1, #20]
 8004ada:	e011      	b.n	8004b00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004adc:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ae4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6892      	ldr	r2, [r2, #8]
 8004aec:	0211      	lsls	r1, r2, #8
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6912      	ldr	r2, [r2, #16]
 8004af2:	0852      	lsrs	r2, r2, #1
 8004af4:	3a01      	subs	r2, #1
 8004af6:	0652      	lsls	r2, r2, #25
 8004af8:	430a      	orrs	r2, r1
 8004afa:	4916      	ldr	r1, [pc, #88]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b00:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0c:	f7fc fc64 	bl	80013d8 <HAL_GetTick>
 8004b10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b12:	e009      	b.n	8004b28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b14:	f7fc fc60 	bl	80013d8 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d902      	bls.n	8004b28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	73fb      	strb	r3, [r7, #15]
          break;
 8004b26:	e005      	b.n	8004b34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0ef      	beq.n	8004b14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3c:	695a      	ldr	r2, [r3, #20]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	4904      	ldr	r1, [pc, #16]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000

08004b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e049      	b.n	8004bfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fc f96e 	bl	8000e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f000 fb7a 	bl	8005290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e049      	b.n	8004cac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f841 	bl	8004cb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3304      	adds	r3, #4
 8004c42:	4619      	mov	r1, r3
 8004c44:	4610      	mov	r0, r2
 8004c46:	f000 fb23 	bl	8005290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <HAL_TIM_PWM_Start+0x24>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	bf14      	ite	ne
 8004ce4:	2301      	movne	r3, #1
 8004ce6:	2300      	moveq	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	e03c      	b.n	8004d66 <HAL_TIM_PWM_Start+0x9e>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d109      	bne.n	8004d06 <HAL_TIM_PWM_Start+0x3e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	bf14      	ite	ne
 8004cfe:	2301      	movne	r3, #1
 8004d00:	2300      	moveq	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	e02f      	b.n	8004d66 <HAL_TIM_PWM_Start+0x9e>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d109      	bne.n	8004d20 <HAL_TIM_PWM_Start+0x58>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	bf14      	ite	ne
 8004d18:	2301      	movne	r3, #1
 8004d1a:	2300      	moveq	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	e022      	b.n	8004d66 <HAL_TIM_PWM_Start+0x9e>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b0c      	cmp	r3, #12
 8004d24:	d109      	bne.n	8004d3a <HAL_TIM_PWM_Start+0x72>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	bf14      	ite	ne
 8004d32:	2301      	movne	r3, #1
 8004d34:	2300      	moveq	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	e015      	b.n	8004d66 <HAL_TIM_PWM_Start+0x9e>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d109      	bne.n	8004d54 <HAL_TIM_PWM_Start+0x8c>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e008      	b.n	8004d66 <HAL_TIM_PWM_Start+0x9e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	bf14      	ite	ne
 8004d60:	2301      	movne	r3, #1
 8004d62:	2300      	moveq	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e09c      	b.n	8004ea8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d104      	bne.n	8004d7e <HAL_TIM_PWM_Start+0xb6>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d7c:	e023      	b.n	8004dc6 <HAL_TIM_PWM_Start+0xfe>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d104      	bne.n	8004d8e <HAL_TIM_PWM_Start+0xc6>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d8c:	e01b      	b.n	8004dc6 <HAL_TIM_PWM_Start+0xfe>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d104      	bne.n	8004d9e <HAL_TIM_PWM_Start+0xd6>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d9c:	e013      	b.n	8004dc6 <HAL_TIM_PWM_Start+0xfe>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b0c      	cmp	r3, #12
 8004da2:	d104      	bne.n	8004dae <HAL_TIM_PWM_Start+0xe6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dac:	e00b      	b.n	8004dc6 <HAL_TIM_PWM_Start+0xfe>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_PWM_Start+0xf6>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dbc:	e003      	b.n	8004dc6 <HAL_TIM_PWM_Start+0xfe>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	6839      	ldr	r1, [r7, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fe68 	bl	8005aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a35      	ldr	r2, [pc, #212]	; (8004eb0 <HAL_TIM_PWM_Start+0x1e8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d013      	beq.n	8004e06 <HAL_TIM_PWM_Start+0x13e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a34      	ldr	r2, [pc, #208]	; (8004eb4 <HAL_TIM_PWM_Start+0x1ec>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00e      	beq.n	8004e06 <HAL_TIM_PWM_Start+0x13e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a32      	ldr	r2, [pc, #200]	; (8004eb8 <HAL_TIM_PWM_Start+0x1f0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d009      	beq.n	8004e06 <HAL_TIM_PWM_Start+0x13e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a31      	ldr	r2, [pc, #196]	; (8004ebc <HAL_TIM_PWM_Start+0x1f4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d004      	beq.n	8004e06 <HAL_TIM_PWM_Start+0x13e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a2f      	ldr	r2, [pc, #188]	; (8004ec0 <HAL_TIM_PWM_Start+0x1f8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d101      	bne.n	8004e0a <HAL_TIM_PWM_Start+0x142>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <HAL_TIM_PWM_Start+0x144>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a22      	ldr	r2, [pc, #136]	; (8004eb0 <HAL_TIM_PWM_Start+0x1e8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01d      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x19e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e32:	d018      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x19e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a22      	ldr	r2, [pc, #136]	; (8004ec4 <HAL_TIM_PWM_Start+0x1fc>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x19e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a21      	ldr	r2, [pc, #132]	; (8004ec8 <HAL_TIM_PWM_Start+0x200>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00e      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x19e>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a1f      	ldr	r2, [pc, #124]	; (8004ecc <HAL_TIM_PWM_Start+0x204>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d009      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x19e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a17      	ldr	r2, [pc, #92]	; (8004eb4 <HAL_TIM_PWM_Start+0x1ec>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x19e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <HAL_TIM_PWM_Start+0x1f0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d115      	bne.n	8004e92 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	4b18      	ldr	r3, [pc, #96]	; (8004ed0 <HAL_TIM_PWM_Start+0x208>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b06      	cmp	r3, #6
 8004e76:	d015      	beq.n	8004ea4 <HAL_TIM_PWM_Start+0x1dc>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7e:	d011      	beq.n	8004ea4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e90:	e008      	b.n	8004ea4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	e000      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40012c00 	.word	0x40012c00
 8004eb4:	40013400 	.word	0x40013400
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400
 8004ec0:	40014800 	.word	0x40014800
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	00010007 	.word	0x00010007

08004ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e0ff      	b.n	80050f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b14      	cmp	r3, #20
 8004efe:	f200 80f0 	bhi.w	80050e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f02:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f5d 	.word	0x08004f5d
 8004f0c:	080050e3 	.word	0x080050e3
 8004f10:	080050e3 	.word	0x080050e3
 8004f14:	080050e3 	.word	0x080050e3
 8004f18:	08004f9d 	.word	0x08004f9d
 8004f1c:	080050e3 	.word	0x080050e3
 8004f20:	080050e3 	.word	0x080050e3
 8004f24:	080050e3 	.word	0x080050e3
 8004f28:	08004fdf 	.word	0x08004fdf
 8004f2c:	080050e3 	.word	0x080050e3
 8004f30:	080050e3 	.word	0x080050e3
 8004f34:	080050e3 	.word	0x080050e3
 8004f38:	0800501f 	.word	0x0800501f
 8004f3c:	080050e3 	.word	0x080050e3
 8004f40:	080050e3 	.word	0x080050e3
 8004f44:	080050e3 	.word	0x080050e3
 8004f48:	08005061 	.word	0x08005061
 8004f4c:	080050e3 	.word	0x080050e3
 8004f50:	080050e3 	.word	0x080050e3
 8004f54:	080050e3 	.word	0x080050e3
 8004f58:	080050a1 	.word	0x080050a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fa2e 	bl	80053c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0208 	orr.w	r2, r2, #8
 8004f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0204 	bic.w	r2, r2, #4
 8004f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6999      	ldr	r1, [r3, #24]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	619a      	str	r2, [r3, #24]
      break;
 8004f9a:	e0a5      	b.n	80050e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fa9e 	bl	80054e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6999      	ldr	r1, [r3, #24]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	021a      	lsls	r2, r3, #8
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	619a      	str	r2, [r3, #24]
      break;
 8004fdc:	e084      	b.n	80050e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fb07 	bl	80055f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69da      	ldr	r2, [r3, #28]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0208 	orr.w	r2, r2, #8
 8004ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0204 	bic.w	r2, r2, #4
 8005008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69d9      	ldr	r1, [r3, #28]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	61da      	str	r2, [r3, #28]
      break;
 800501c:	e064      	b.n	80050e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68b9      	ldr	r1, [r7, #8]
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fb6f 	bl	8005708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69da      	ldr	r2, [r3, #28]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69d9      	ldr	r1, [r3, #28]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	021a      	lsls	r2, r3, #8
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	61da      	str	r2, [r3, #28]
      break;
 800505e:	e043      	b.n	80050e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fbb8 	bl	80057dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0208 	orr.w	r2, r2, #8
 800507a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0204 	bic.w	r2, r2, #4
 800508a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800509e:	e023      	b.n	80050e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fbfc 	bl	80058a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	021a      	lsls	r2, r3, #8
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050e0:	e002      	b.n	80050e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	75fb      	strb	r3, [r7, #23]
      break;
 80050e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop

080050fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_TIM_ConfigClockSource+0x1c>
 8005114:	2302      	movs	r3, #2
 8005116:	e0b6      	b.n	8005286 <HAL_TIM_ConfigClockSource+0x18a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005136:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800513a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005154:	d03e      	beq.n	80051d4 <HAL_TIM_ConfigClockSource+0xd8>
 8005156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515a:	f200 8087 	bhi.w	800526c <HAL_TIM_ConfigClockSource+0x170>
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005162:	f000 8086 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x176>
 8005166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516a:	d87f      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x170>
 800516c:	2b70      	cmp	r3, #112	; 0x70
 800516e:	d01a      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0xaa>
 8005170:	2b70      	cmp	r3, #112	; 0x70
 8005172:	d87b      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x170>
 8005174:	2b60      	cmp	r3, #96	; 0x60
 8005176:	d050      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x11e>
 8005178:	2b60      	cmp	r3, #96	; 0x60
 800517a:	d877      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x170>
 800517c:	2b50      	cmp	r3, #80	; 0x50
 800517e:	d03c      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0xfe>
 8005180:	2b50      	cmp	r3, #80	; 0x50
 8005182:	d873      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x170>
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	d058      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x13e>
 8005188:	2b40      	cmp	r3, #64	; 0x40
 800518a:	d86f      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x170>
 800518c:	2b30      	cmp	r3, #48	; 0x30
 800518e:	d064      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x15e>
 8005190:	2b30      	cmp	r3, #48	; 0x30
 8005192:	d86b      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x170>
 8005194:	2b20      	cmp	r3, #32
 8005196:	d060      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x15e>
 8005198:	2b20      	cmp	r3, #32
 800519a:	d867      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x170>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d05c      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x15e>
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d05a      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x15e>
 80051a4:	e062      	b.n	800526c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6899      	ldr	r1, [r3, #8]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f000 fc55 	bl	8005a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	609a      	str	r2, [r3, #8]
      break;
 80051d2:	e04f      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	6899      	ldr	r1, [r3, #8]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f000 fc3e 	bl	8005a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051f6:	609a      	str	r2, [r3, #8]
      break;
 80051f8:	e03c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6859      	ldr	r1, [r3, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	461a      	mov	r2, r3
 8005208:	f000 fbb2 	bl	8005970 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2150      	movs	r1, #80	; 0x50
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fc0b 	bl	8005a2e <TIM_ITRx_SetConfig>
      break;
 8005218:	e02c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	461a      	mov	r2, r3
 8005228:	f000 fbd1 	bl	80059ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2160      	movs	r1, #96	; 0x60
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fbfb 	bl	8005a2e <TIM_ITRx_SetConfig>
      break;
 8005238:	e01c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6859      	ldr	r1, [r3, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	461a      	mov	r2, r3
 8005248:	f000 fb92 	bl	8005970 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2140      	movs	r1, #64	; 0x40
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fbeb 	bl	8005a2e <TIM_ITRx_SetConfig>
      break;
 8005258:	e00c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4619      	mov	r1, r3
 8005264:	4610      	mov	r0, r2
 8005266:	f000 fbe2 	bl	8005a2e <TIM_ITRx_SetConfig>
      break;
 800526a:	e003      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
      break;
 8005270:	e000      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005284:	7bfb      	ldrb	r3, [r7, #15]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a40      	ldr	r2, [pc, #256]	; (80053a4 <TIM_Base_SetConfig+0x114>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d013      	beq.n	80052d0 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ae:	d00f      	beq.n	80052d0 <TIM_Base_SetConfig+0x40>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a3d      	ldr	r2, [pc, #244]	; (80053a8 <TIM_Base_SetConfig+0x118>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00b      	beq.n	80052d0 <TIM_Base_SetConfig+0x40>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a3c      	ldr	r2, [pc, #240]	; (80053ac <TIM_Base_SetConfig+0x11c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d007      	beq.n	80052d0 <TIM_Base_SetConfig+0x40>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a3b      	ldr	r2, [pc, #236]	; (80053b0 <TIM_Base_SetConfig+0x120>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_Base_SetConfig+0x40>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a3a      	ldr	r2, [pc, #232]	; (80053b4 <TIM_Base_SetConfig+0x124>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d108      	bne.n	80052e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a2f      	ldr	r2, [pc, #188]	; (80053a4 <TIM_Base_SetConfig+0x114>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01f      	beq.n	800532a <TIM_Base_SetConfig+0x9a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f0:	d01b      	beq.n	800532a <TIM_Base_SetConfig+0x9a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a2c      	ldr	r2, [pc, #176]	; (80053a8 <TIM_Base_SetConfig+0x118>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d017      	beq.n	800532a <TIM_Base_SetConfig+0x9a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a2b      	ldr	r2, [pc, #172]	; (80053ac <TIM_Base_SetConfig+0x11c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d013      	beq.n	800532a <TIM_Base_SetConfig+0x9a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a2a      	ldr	r2, [pc, #168]	; (80053b0 <TIM_Base_SetConfig+0x120>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00f      	beq.n	800532a <TIM_Base_SetConfig+0x9a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a29      	ldr	r2, [pc, #164]	; (80053b4 <TIM_Base_SetConfig+0x124>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00b      	beq.n	800532a <TIM_Base_SetConfig+0x9a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a28      	ldr	r2, [pc, #160]	; (80053b8 <TIM_Base_SetConfig+0x128>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d007      	beq.n	800532a <TIM_Base_SetConfig+0x9a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a27      	ldr	r2, [pc, #156]	; (80053bc <TIM_Base_SetConfig+0x12c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d003      	beq.n	800532a <TIM_Base_SetConfig+0x9a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a26      	ldr	r2, [pc, #152]	; (80053c0 <TIM_Base_SetConfig+0x130>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d108      	bne.n	800533c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a10      	ldr	r2, [pc, #64]	; (80053a4 <TIM_Base_SetConfig+0x114>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00f      	beq.n	8005388 <TIM_Base_SetConfig+0xf8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a12      	ldr	r2, [pc, #72]	; (80053b4 <TIM_Base_SetConfig+0x124>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00b      	beq.n	8005388 <TIM_Base_SetConfig+0xf8>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a11      	ldr	r2, [pc, #68]	; (80053b8 <TIM_Base_SetConfig+0x128>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d007      	beq.n	8005388 <TIM_Base_SetConfig+0xf8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a10      	ldr	r2, [pc, #64]	; (80053bc <TIM_Base_SetConfig+0x12c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d003      	beq.n	8005388 <TIM_Base_SetConfig+0xf8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a0f      	ldr	r2, [pc, #60]	; (80053c0 <TIM_Base_SetConfig+0x130>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d103      	bne.n	8005390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	615a      	str	r2, [r3, #20]
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40000400 	.word	0x40000400
 80053ac:	40000800 	.word	0x40000800
 80053b0:	40000c00 	.word	0x40000c00
 80053b4:	40013400 	.word	0x40013400
 80053b8:	40014000 	.word	0x40014000
 80053bc:	40014400 	.word	0x40014400
 80053c0:	40014800 	.word	0x40014800

080053c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f023 0201 	bic.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0303 	bic.w	r3, r3, #3
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f023 0302 	bic.w	r3, r3, #2
 8005410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a2c      	ldr	r2, [pc, #176]	; (80054d0 <TIM_OC1_SetConfig+0x10c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00f      	beq.n	8005444 <TIM_OC1_SetConfig+0x80>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a2b      	ldr	r2, [pc, #172]	; (80054d4 <TIM_OC1_SetConfig+0x110>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00b      	beq.n	8005444 <TIM_OC1_SetConfig+0x80>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a2a      	ldr	r2, [pc, #168]	; (80054d8 <TIM_OC1_SetConfig+0x114>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d007      	beq.n	8005444 <TIM_OC1_SetConfig+0x80>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a29      	ldr	r2, [pc, #164]	; (80054dc <TIM_OC1_SetConfig+0x118>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <TIM_OC1_SetConfig+0x80>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a28      	ldr	r2, [pc, #160]	; (80054e0 <TIM_OC1_SetConfig+0x11c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d10c      	bne.n	800545e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f023 0308 	bic.w	r3, r3, #8
 800544a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 0304 	bic.w	r3, r3, #4
 800545c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a1b      	ldr	r2, [pc, #108]	; (80054d0 <TIM_OC1_SetConfig+0x10c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00f      	beq.n	8005486 <TIM_OC1_SetConfig+0xc2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a1a      	ldr	r2, [pc, #104]	; (80054d4 <TIM_OC1_SetConfig+0x110>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00b      	beq.n	8005486 <TIM_OC1_SetConfig+0xc2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a19      	ldr	r2, [pc, #100]	; (80054d8 <TIM_OC1_SetConfig+0x114>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d007      	beq.n	8005486 <TIM_OC1_SetConfig+0xc2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a18      	ldr	r2, [pc, #96]	; (80054dc <TIM_OC1_SetConfig+0x118>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_OC1_SetConfig+0xc2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <TIM_OC1_SetConfig+0x11c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d111      	bne.n	80054aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800548c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	621a      	str	r2, [r3, #32]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	40012c00 	.word	0x40012c00
 80054d4:	40013400 	.word	0x40013400
 80054d8:	40014000 	.word	0x40014000
 80054dc:	40014400 	.word	0x40014400
 80054e0:	40014800 	.word	0x40014800

080054e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f023 0210 	bic.w	r2, r3, #16
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f023 0320 	bic.w	r3, r3, #32
 8005532:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a28      	ldr	r2, [pc, #160]	; (80055e4 <TIM_OC2_SetConfig+0x100>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_OC2_SetConfig+0x6c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a27      	ldr	r2, [pc, #156]	; (80055e8 <TIM_OC2_SetConfig+0x104>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d10d      	bne.n	800556c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800556a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <TIM_OC2_SetConfig+0x100>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00f      	beq.n	8005594 <TIM_OC2_SetConfig+0xb0>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <TIM_OC2_SetConfig+0x104>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00b      	beq.n	8005594 <TIM_OC2_SetConfig+0xb0>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <TIM_OC2_SetConfig+0x108>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d007      	beq.n	8005594 <TIM_OC2_SetConfig+0xb0>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a1a      	ldr	r2, [pc, #104]	; (80055f0 <TIM_OC2_SetConfig+0x10c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_OC2_SetConfig+0xb0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a19      	ldr	r2, [pc, #100]	; (80055f4 <TIM_OC2_SetConfig+0x110>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d113      	bne.n	80055bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800559a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40013400 	.word	0x40013400
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40014400 	.word	0x40014400
 80055f4:	40014800 	.word	0x40014800

080055f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0303 	bic.w	r3, r3, #3
 8005632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a27      	ldr	r2, [pc, #156]	; (80056f4 <TIM_OC3_SetConfig+0xfc>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d003      	beq.n	8005662 <TIM_OC3_SetConfig+0x6a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a26      	ldr	r2, [pc, #152]	; (80056f8 <TIM_OC3_SetConfig+0x100>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d10d      	bne.n	800567e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005668:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	021b      	lsls	r3, r3, #8
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800567c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a1c      	ldr	r2, [pc, #112]	; (80056f4 <TIM_OC3_SetConfig+0xfc>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00f      	beq.n	80056a6 <TIM_OC3_SetConfig+0xae>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a1b      	ldr	r2, [pc, #108]	; (80056f8 <TIM_OC3_SetConfig+0x100>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00b      	beq.n	80056a6 <TIM_OC3_SetConfig+0xae>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a1a      	ldr	r2, [pc, #104]	; (80056fc <TIM_OC3_SetConfig+0x104>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d007      	beq.n	80056a6 <TIM_OC3_SetConfig+0xae>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a19      	ldr	r2, [pc, #100]	; (8005700 <TIM_OC3_SetConfig+0x108>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d003      	beq.n	80056a6 <TIM_OC3_SetConfig+0xae>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a18      	ldr	r2, [pc, #96]	; (8005704 <TIM_OC3_SetConfig+0x10c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d113      	bne.n	80056ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	621a      	str	r2, [r3, #32]
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	40012c00 	.word	0x40012c00
 80056f8:	40013400 	.word	0x40013400
 80056fc:	40014000 	.word	0x40014000
 8005700:	40014400 	.word	0x40014400
 8005704:	40014800 	.word	0x40014800

08005708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	031b      	lsls	r3, r3, #12
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a18      	ldr	r2, [pc, #96]	; (80057c8 <TIM_OC4_SetConfig+0xc0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00f      	beq.n	800578c <TIM_OC4_SetConfig+0x84>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a17      	ldr	r2, [pc, #92]	; (80057cc <TIM_OC4_SetConfig+0xc4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00b      	beq.n	800578c <TIM_OC4_SetConfig+0x84>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a16      	ldr	r2, [pc, #88]	; (80057d0 <TIM_OC4_SetConfig+0xc8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <TIM_OC4_SetConfig+0x84>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a15      	ldr	r2, [pc, #84]	; (80057d4 <TIM_OC4_SetConfig+0xcc>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_OC4_SetConfig+0x84>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a14      	ldr	r2, [pc, #80]	; (80057d8 <TIM_OC4_SetConfig+0xd0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d109      	bne.n	80057a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	019b      	lsls	r3, r3, #6
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	621a      	str	r2, [r3, #32]
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	40012c00 	.word	0x40012c00
 80057cc:	40013400 	.word	0x40013400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800

080057dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005820:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	041b      	lsls	r3, r3, #16
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a17      	ldr	r2, [pc, #92]	; (8005890 <TIM_OC5_SetConfig+0xb4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00f      	beq.n	8005856 <TIM_OC5_SetConfig+0x7a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a16      	ldr	r2, [pc, #88]	; (8005894 <TIM_OC5_SetConfig+0xb8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00b      	beq.n	8005856 <TIM_OC5_SetConfig+0x7a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a15      	ldr	r2, [pc, #84]	; (8005898 <TIM_OC5_SetConfig+0xbc>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d007      	beq.n	8005856 <TIM_OC5_SetConfig+0x7a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a14      	ldr	r2, [pc, #80]	; (800589c <TIM_OC5_SetConfig+0xc0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d003      	beq.n	8005856 <TIM_OC5_SetConfig+0x7a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a13      	ldr	r2, [pc, #76]	; (80058a0 <TIM_OC5_SetConfig+0xc4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d109      	bne.n	800586a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	621a      	str	r2, [r3, #32]
}
 8005884:	bf00      	nop
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	40012c00 	.word	0x40012c00
 8005894:	40013400 	.word	0x40013400
 8005898:	40014000 	.word	0x40014000
 800589c:	40014400 	.word	0x40014400
 80058a0:	40014800 	.word	0x40014800

080058a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	051b      	lsls	r3, r3, #20
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a18      	ldr	r2, [pc, #96]	; (800595c <TIM_OC6_SetConfig+0xb8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00f      	beq.n	8005920 <TIM_OC6_SetConfig+0x7c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a17      	ldr	r2, [pc, #92]	; (8005960 <TIM_OC6_SetConfig+0xbc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00b      	beq.n	8005920 <TIM_OC6_SetConfig+0x7c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a16      	ldr	r2, [pc, #88]	; (8005964 <TIM_OC6_SetConfig+0xc0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d007      	beq.n	8005920 <TIM_OC6_SetConfig+0x7c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a15      	ldr	r2, [pc, #84]	; (8005968 <TIM_OC6_SetConfig+0xc4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_OC6_SetConfig+0x7c>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a14      	ldr	r2, [pc, #80]	; (800596c <TIM_OC6_SetConfig+0xc8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d109      	bne.n	8005934 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005926:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	029b      	lsls	r3, r3, #10
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	621a      	str	r2, [r3, #32]
}
 800594e:	bf00      	nop
 8005950:	371c      	adds	r7, #28
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40012c00 	.word	0x40012c00
 8005960:	40013400 	.word	0x40013400
 8005964:	40014000 	.word	0x40014000
 8005968:	40014400 	.word	0x40014400
 800596c:	40014800 	.word	0x40014800

08005970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f023 0201 	bic.w	r2, r3, #1
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800599a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f023 030a 	bic.w	r3, r3, #10
 80059ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	621a      	str	r2, [r3, #32]
}
 80059c2:	bf00      	nop
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b087      	sub	sp, #28
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 0210 	bic.w	r2, r3, #16
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	031b      	lsls	r3, r3, #12
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f043 0307 	orr.w	r3, r3, #7
 8005a50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	609a      	str	r2, [r3, #8]
}
 8005a58:	bf00      	nop
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	021a      	lsls	r2, r3, #8
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	609a      	str	r2, [r3, #8]
}
 8005a98:	bf00      	nop
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a1a      	ldr	r2, [r3, #32]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	401a      	ands	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a1a      	ldr	r2, [r3, #32]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	621a      	str	r2, [r3, #32]
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
	...

08005af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e068      	b.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a2e      	ldr	r2, [pc, #184]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d004      	beq.n	8005b3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a2d      	ldr	r2, [pc, #180]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d108      	bne.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1e      	ldr	r2, [pc, #120]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d01d      	beq.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7a:	d018      	beq.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d013      	beq.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1a      	ldr	r2, [pc, #104]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00e      	beq.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d009      	beq.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a13      	ldr	r2, [pc, #76]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d004      	beq.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a14      	ldr	r2, [pc, #80]	; (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d10c      	bne.n	8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40012c00 	.word	0x40012c00
 8005bec:	40013400 	.word	0x40013400
 8005bf0:	40000400 	.word	0x40000400
 8005bf4:	40000800 	.word	0x40000800
 8005bf8:	40000c00 	.word	0x40000c00
 8005bfc:	40014000 	.word	0x40014000

08005c00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e040      	b.n	8005c94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fb f990 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2224      	movs	r2, #36	; 0x24
 8005c2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f8c0 	bl	8005dc4 <UART_SetConfig>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d101      	bne.n	8005c4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e022      	b.n	8005c94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fb3e 	bl	80062d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fbc5 	bl	800641c <UART_CheckIdleState>
 8005c92:	4603      	mov	r3, r0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08a      	sub	sp, #40	; 0x28
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	f040 8082 	bne.w	8005dba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <HAL_UART_Transmit+0x26>
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e07a      	b.n	8005dbc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_UART_Transmit+0x38>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e073      	b.n	8005dbc <HAL_UART_Transmit+0x120>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2221      	movs	r2, #33	; 0x21
 8005ce8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cea:	f7fb fb75 	bl	80013d8 <HAL_GetTick>
 8005cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	88fa      	ldrh	r2, [r7, #6]
 8005cf4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	88fa      	ldrh	r2, [r7, #6]
 8005cfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d08:	d108      	bne.n	8005d1c <HAL_UART_Transmit+0x80>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d104      	bne.n	8005d1c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	e003      	b.n	8005d24 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005d2c:	e02d      	b.n	8005d8a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2200      	movs	r2, #0
 8005d36:	2180      	movs	r1, #128	; 0x80
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 fbb8 	bl	80064ae <UART_WaitOnFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e039      	b.n	8005dbc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	881a      	ldrh	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d5a:	b292      	uxth	r2, r2
 8005d5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	3302      	adds	r3, #2
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	e008      	b.n	8005d78 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	781a      	ldrb	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	b292      	uxth	r2, r2
 8005d70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	3301      	adds	r3, #1
 8005d76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1cb      	bne.n	8005d2e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2140      	movs	r1, #64	; 0x40
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 fb84 	bl	80064ae <UART_WaitOnFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e005      	b.n	8005dbc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e000      	b.n	8005dbc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005dba:	2302      	movs	r3, #2
  }
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3720      	adds	r7, #32
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dc4:	b5b0      	push	{r4, r5, r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	4bad      	ldr	r3, [pc, #692]	; (80060a4 <UART_SetConfig+0x2e0>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	69f9      	ldr	r1, [r7, #28]
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4aa2      	ldr	r2, [pc, #648]	; (80060a8 <UART_SetConfig+0x2e4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69fa      	ldr	r2, [r7, #28]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a99      	ldr	r2, [pc, #612]	; (80060ac <UART_SetConfig+0x2e8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d121      	bne.n	8005e8e <UART_SetConfig+0xca>
 8005e4a:	4b99      	ldr	r3, [pc, #612]	; (80060b0 <UART_SetConfig+0x2ec>)
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d817      	bhi.n	8005e88 <UART_SetConfig+0xc4>
 8005e58:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <UART_SetConfig+0x9c>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005e71 	.word	0x08005e71
 8005e64:	08005e7d 	.word	0x08005e7d
 8005e68:	08005e77 	.word	0x08005e77
 8005e6c:	08005e83 	.word	0x08005e83
 8005e70:	2301      	movs	r3, #1
 8005e72:	76fb      	strb	r3, [r7, #27]
 8005e74:	e0e7      	b.n	8006046 <UART_SetConfig+0x282>
 8005e76:	2302      	movs	r3, #2
 8005e78:	76fb      	strb	r3, [r7, #27]
 8005e7a:	e0e4      	b.n	8006046 <UART_SetConfig+0x282>
 8005e7c:	2304      	movs	r3, #4
 8005e7e:	76fb      	strb	r3, [r7, #27]
 8005e80:	e0e1      	b.n	8006046 <UART_SetConfig+0x282>
 8005e82:	2308      	movs	r3, #8
 8005e84:	76fb      	strb	r3, [r7, #27]
 8005e86:	e0de      	b.n	8006046 <UART_SetConfig+0x282>
 8005e88:	2310      	movs	r3, #16
 8005e8a:	76fb      	strb	r3, [r7, #27]
 8005e8c:	e0db      	b.n	8006046 <UART_SetConfig+0x282>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a88      	ldr	r2, [pc, #544]	; (80060b4 <UART_SetConfig+0x2f0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d132      	bne.n	8005efe <UART_SetConfig+0x13a>
 8005e98:	4b85      	ldr	r3, [pc, #532]	; (80060b0 <UART_SetConfig+0x2ec>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9e:	f003 030c 	and.w	r3, r3, #12
 8005ea2:	2b0c      	cmp	r3, #12
 8005ea4:	d828      	bhi.n	8005ef8 <UART_SetConfig+0x134>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <UART_SetConfig+0xe8>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ee1 	.word	0x08005ee1
 8005eb0:	08005ef9 	.word	0x08005ef9
 8005eb4:	08005ef9 	.word	0x08005ef9
 8005eb8:	08005ef9 	.word	0x08005ef9
 8005ebc:	08005eed 	.word	0x08005eed
 8005ec0:	08005ef9 	.word	0x08005ef9
 8005ec4:	08005ef9 	.word	0x08005ef9
 8005ec8:	08005ef9 	.word	0x08005ef9
 8005ecc:	08005ee7 	.word	0x08005ee7
 8005ed0:	08005ef9 	.word	0x08005ef9
 8005ed4:	08005ef9 	.word	0x08005ef9
 8005ed8:	08005ef9 	.word	0x08005ef9
 8005edc:	08005ef3 	.word	0x08005ef3
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	76fb      	strb	r3, [r7, #27]
 8005ee4:	e0af      	b.n	8006046 <UART_SetConfig+0x282>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	76fb      	strb	r3, [r7, #27]
 8005eea:	e0ac      	b.n	8006046 <UART_SetConfig+0x282>
 8005eec:	2304      	movs	r3, #4
 8005eee:	76fb      	strb	r3, [r7, #27]
 8005ef0:	e0a9      	b.n	8006046 <UART_SetConfig+0x282>
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	76fb      	strb	r3, [r7, #27]
 8005ef6:	e0a6      	b.n	8006046 <UART_SetConfig+0x282>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	76fb      	strb	r3, [r7, #27]
 8005efc:	e0a3      	b.n	8006046 <UART_SetConfig+0x282>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a6d      	ldr	r2, [pc, #436]	; (80060b8 <UART_SetConfig+0x2f4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d120      	bne.n	8005f4a <UART_SetConfig+0x186>
 8005f08:	4b69      	ldr	r3, [pc, #420]	; (80060b0 <UART_SetConfig+0x2ec>)
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f12:	2b30      	cmp	r3, #48	; 0x30
 8005f14:	d013      	beq.n	8005f3e <UART_SetConfig+0x17a>
 8005f16:	2b30      	cmp	r3, #48	; 0x30
 8005f18:	d814      	bhi.n	8005f44 <UART_SetConfig+0x180>
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	d009      	beq.n	8005f32 <UART_SetConfig+0x16e>
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d810      	bhi.n	8005f44 <UART_SetConfig+0x180>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <UART_SetConfig+0x168>
 8005f26:	2b10      	cmp	r3, #16
 8005f28:	d006      	beq.n	8005f38 <UART_SetConfig+0x174>
 8005f2a:	e00b      	b.n	8005f44 <UART_SetConfig+0x180>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	76fb      	strb	r3, [r7, #27]
 8005f30:	e089      	b.n	8006046 <UART_SetConfig+0x282>
 8005f32:	2302      	movs	r3, #2
 8005f34:	76fb      	strb	r3, [r7, #27]
 8005f36:	e086      	b.n	8006046 <UART_SetConfig+0x282>
 8005f38:	2304      	movs	r3, #4
 8005f3a:	76fb      	strb	r3, [r7, #27]
 8005f3c:	e083      	b.n	8006046 <UART_SetConfig+0x282>
 8005f3e:	2308      	movs	r3, #8
 8005f40:	76fb      	strb	r3, [r7, #27]
 8005f42:	e080      	b.n	8006046 <UART_SetConfig+0x282>
 8005f44:	2310      	movs	r3, #16
 8005f46:	76fb      	strb	r3, [r7, #27]
 8005f48:	e07d      	b.n	8006046 <UART_SetConfig+0x282>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a5b      	ldr	r2, [pc, #364]	; (80060bc <UART_SetConfig+0x2f8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d120      	bne.n	8005f96 <UART_SetConfig+0x1d2>
 8005f54:	4b56      	ldr	r3, [pc, #344]	; (80060b0 <UART_SetConfig+0x2ec>)
 8005f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f5e:	2bc0      	cmp	r3, #192	; 0xc0
 8005f60:	d013      	beq.n	8005f8a <UART_SetConfig+0x1c6>
 8005f62:	2bc0      	cmp	r3, #192	; 0xc0
 8005f64:	d814      	bhi.n	8005f90 <UART_SetConfig+0x1cc>
 8005f66:	2b80      	cmp	r3, #128	; 0x80
 8005f68:	d009      	beq.n	8005f7e <UART_SetConfig+0x1ba>
 8005f6a:	2b80      	cmp	r3, #128	; 0x80
 8005f6c:	d810      	bhi.n	8005f90 <UART_SetConfig+0x1cc>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <UART_SetConfig+0x1b4>
 8005f72:	2b40      	cmp	r3, #64	; 0x40
 8005f74:	d006      	beq.n	8005f84 <UART_SetConfig+0x1c0>
 8005f76:	e00b      	b.n	8005f90 <UART_SetConfig+0x1cc>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	76fb      	strb	r3, [r7, #27]
 8005f7c:	e063      	b.n	8006046 <UART_SetConfig+0x282>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	76fb      	strb	r3, [r7, #27]
 8005f82:	e060      	b.n	8006046 <UART_SetConfig+0x282>
 8005f84:	2304      	movs	r3, #4
 8005f86:	76fb      	strb	r3, [r7, #27]
 8005f88:	e05d      	b.n	8006046 <UART_SetConfig+0x282>
 8005f8a:	2308      	movs	r3, #8
 8005f8c:	76fb      	strb	r3, [r7, #27]
 8005f8e:	e05a      	b.n	8006046 <UART_SetConfig+0x282>
 8005f90:	2310      	movs	r3, #16
 8005f92:	76fb      	strb	r3, [r7, #27]
 8005f94:	e057      	b.n	8006046 <UART_SetConfig+0x282>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a49      	ldr	r2, [pc, #292]	; (80060c0 <UART_SetConfig+0x2fc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d125      	bne.n	8005fec <UART_SetConfig+0x228>
 8005fa0:	4b43      	ldr	r3, [pc, #268]	; (80060b0 <UART_SetConfig+0x2ec>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fae:	d017      	beq.n	8005fe0 <UART_SetConfig+0x21c>
 8005fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fb4:	d817      	bhi.n	8005fe6 <UART_SetConfig+0x222>
 8005fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fba:	d00b      	beq.n	8005fd4 <UART_SetConfig+0x210>
 8005fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc0:	d811      	bhi.n	8005fe6 <UART_SetConfig+0x222>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <UART_SetConfig+0x20a>
 8005fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fca:	d006      	beq.n	8005fda <UART_SetConfig+0x216>
 8005fcc:	e00b      	b.n	8005fe6 <UART_SetConfig+0x222>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	76fb      	strb	r3, [r7, #27]
 8005fd2:	e038      	b.n	8006046 <UART_SetConfig+0x282>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	76fb      	strb	r3, [r7, #27]
 8005fd8:	e035      	b.n	8006046 <UART_SetConfig+0x282>
 8005fda:	2304      	movs	r3, #4
 8005fdc:	76fb      	strb	r3, [r7, #27]
 8005fde:	e032      	b.n	8006046 <UART_SetConfig+0x282>
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	76fb      	strb	r3, [r7, #27]
 8005fe4:	e02f      	b.n	8006046 <UART_SetConfig+0x282>
 8005fe6:	2310      	movs	r3, #16
 8005fe8:	76fb      	strb	r3, [r7, #27]
 8005fea:	e02c      	b.n	8006046 <UART_SetConfig+0x282>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a2d      	ldr	r2, [pc, #180]	; (80060a8 <UART_SetConfig+0x2e4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d125      	bne.n	8006042 <UART_SetConfig+0x27e>
 8005ff6:	4b2e      	ldr	r3, [pc, #184]	; (80060b0 <UART_SetConfig+0x2ec>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006000:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006004:	d017      	beq.n	8006036 <UART_SetConfig+0x272>
 8006006:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800600a:	d817      	bhi.n	800603c <UART_SetConfig+0x278>
 800600c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006010:	d00b      	beq.n	800602a <UART_SetConfig+0x266>
 8006012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006016:	d811      	bhi.n	800603c <UART_SetConfig+0x278>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <UART_SetConfig+0x260>
 800601c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006020:	d006      	beq.n	8006030 <UART_SetConfig+0x26c>
 8006022:	e00b      	b.n	800603c <UART_SetConfig+0x278>
 8006024:	2300      	movs	r3, #0
 8006026:	76fb      	strb	r3, [r7, #27]
 8006028:	e00d      	b.n	8006046 <UART_SetConfig+0x282>
 800602a:	2302      	movs	r3, #2
 800602c:	76fb      	strb	r3, [r7, #27]
 800602e:	e00a      	b.n	8006046 <UART_SetConfig+0x282>
 8006030:	2304      	movs	r3, #4
 8006032:	76fb      	strb	r3, [r7, #27]
 8006034:	e007      	b.n	8006046 <UART_SetConfig+0x282>
 8006036:	2308      	movs	r3, #8
 8006038:	76fb      	strb	r3, [r7, #27]
 800603a:	e004      	b.n	8006046 <UART_SetConfig+0x282>
 800603c:	2310      	movs	r3, #16
 800603e:	76fb      	strb	r3, [r7, #27]
 8006040:	e001      	b.n	8006046 <UART_SetConfig+0x282>
 8006042:	2310      	movs	r3, #16
 8006044:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a17      	ldr	r2, [pc, #92]	; (80060a8 <UART_SetConfig+0x2e4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	f040 8087 	bne.w	8006160 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006052:	7efb      	ldrb	r3, [r7, #27]
 8006054:	2b08      	cmp	r3, #8
 8006056:	d837      	bhi.n	80060c8 <UART_SetConfig+0x304>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x29c>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006085 	.word	0x08006085
 8006064:	080060c9 	.word	0x080060c9
 8006068:	0800608d 	.word	0x0800608d
 800606c:	080060c9 	.word	0x080060c9
 8006070:	08006093 	.word	0x08006093
 8006074:	080060c9 	.word	0x080060c9
 8006078:	080060c9 	.word	0x080060c9
 800607c:	080060c9 	.word	0x080060c9
 8006080:	0800609b 	.word	0x0800609b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006084:	f7fe f810 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8006088:	6178      	str	r0, [r7, #20]
        break;
 800608a:	e022      	b.n	80060d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800608c:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <UART_SetConfig+0x300>)
 800608e:	617b      	str	r3, [r7, #20]
        break;
 8006090:	e01f      	b.n	80060d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006092:	f7fd ff71 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8006096:	6178      	str	r0, [r7, #20]
        break;
 8006098:	e01b      	b.n	80060d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800609e:	617b      	str	r3, [r7, #20]
        break;
 80060a0:	e017      	b.n	80060d2 <UART_SetConfig+0x30e>
 80060a2:	bf00      	nop
 80060a4:	efff69f3 	.word	0xefff69f3
 80060a8:	40008000 	.word	0x40008000
 80060ac:	40013800 	.word	0x40013800
 80060b0:	40021000 	.word	0x40021000
 80060b4:	40004400 	.word	0x40004400
 80060b8:	40004800 	.word	0x40004800
 80060bc:	40004c00 	.word	0x40004c00
 80060c0:	40005000 	.word	0x40005000
 80060c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	76bb      	strb	r3, [r7, #26]
        break;
 80060d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 80f1 	beq.w	80062bc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	4413      	add	r3, r2
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d305      	bcc.n	80060f6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d902      	bls.n	80060fc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	76bb      	strb	r3, [r7, #26]
 80060fa:	e0df      	b.n	80062bc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	4618      	mov	r0, r3
 8006100:	f04f 0100 	mov.w	r1, #0
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	020b      	lsls	r3, r1, #8
 800610e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006112:	0202      	lsls	r2, r0, #8
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	6849      	ldr	r1, [r1, #4]
 8006118:	0849      	lsrs	r1, r1, #1
 800611a:	4608      	mov	r0, r1
 800611c:	f04f 0100 	mov.w	r1, #0
 8006120:	1814      	adds	r4, r2, r0
 8006122:	eb43 0501 	adc.w	r5, r3, r1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	461a      	mov	r2, r3
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	4620      	mov	r0, r4
 8006132:	4629      	mov	r1, r5
 8006134:	f7fa f8a4 	bl	8000280 <__aeabi_uldivmod>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4613      	mov	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006146:	d308      	bcc.n	800615a <UART_SetConfig+0x396>
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800614e:	d204      	bcs.n	800615a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	60da      	str	r2, [r3, #12]
 8006158:	e0b0      	b.n	80062bc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	76bb      	strb	r3, [r7, #26]
 800615e:	e0ad      	b.n	80062bc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006168:	d15b      	bne.n	8006222 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800616a:	7efb      	ldrb	r3, [r7, #27]
 800616c:	2b08      	cmp	r3, #8
 800616e:	d828      	bhi.n	80061c2 <UART_SetConfig+0x3fe>
 8006170:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <UART_SetConfig+0x3b4>)
 8006172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006176:	bf00      	nop
 8006178:	0800619d 	.word	0x0800619d
 800617c:	080061a5 	.word	0x080061a5
 8006180:	080061ad 	.word	0x080061ad
 8006184:	080061c3 	.word	0x080061c3
 8006188:	080061b3 	.word	0x080061b3
 800618c:	080061c3 	.word	0x080061c3
 8006190:	080061c3 	.word	0x080061c3
 8006194:	080061c3 	.word	0x080061c3
 8006198:	080061bb 	.word	0x080061bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800619c:	f7fd ff84 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 80061a0:	6178      	str	r0, [r7, #20]
        break;
 80061a2:	e013      	b.n	80061cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061a4:	f7fd ff96 	bl	80040d4 <HAL_RCC_GetPCLK2Freq>
 80061a8:	6178      	str	r0, [r7, #20]
        break;
 80061aa:	e00f      	b.n	80061cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061ac:	4b49      	ldr	r3, [pc, #292]	; (80062d4 <UART_SetConfig+0x510>)
 80061ae:	617b      	str	r3, [r7, #20]
        break;
 80061b0:	e00c      	b.n	80061cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061b2:	f7fd fee1 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 80061b6:	6178      	str	r0, [r7, #20]
        break;
 80061b8:	e008      	b.n	80061cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061be:	617b      	str	r3, [r7, #20]
        break;
 80061c0:	e004      	b.n	80061cc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	76bb      	strb	r3, [r7, #26]
        break;
 80061ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d074      	beq.n	80062bc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	005a      	lsls	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	441a      	add	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	2b0f      	cmp	r3, #15
 80061ec:	d916      	bls.n	800621c <UART_SetConfig+0x458>
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f4:	d212      	bcs.n	800621c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f023 030f 	bic.w	r3, r3, #15
 80061fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	b29b      	uxth	r3, r3
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	b29a      	uxth	r2, r3
 800620c:	89fb      	ldrh	r3, [r7, #14]
 800620e:	4313      	orrs	r3, r2
 8006210:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	89fa      	ldrh	r2, [r7, #14]
 8006218:	60da      	str	r2, [r3, #12]
 800621a:	e04f      	b.n	80062bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	76bb      	strb	r3, [r7, #26]
 8006220:	e04c      	b.n	80062bc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006222:	7efb      	ldrb	r3, [r7, #27]
 8006224:	2b08      	cmp	r3, #8
 8006226:	d828      	bhi.n	800627a <UART_SetConfig+0x4b6>
 8006228:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <UART_SetConfig+0x46c>)
 800622a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622e:	bf00      	nop
 8006230:	08006255 	.word	0x08006255
 8006234:	0800625d 	.word	0x0800625d
 8006238:	08006265 	.word	0x08006265
 800623c:	0800627b 	.word	0x0800627b
 8006240:	0800626b 	.word	0x0800626b
 8006244:	0800627b 	.word	0x0800627b
 8006248:	0800627b 	.word	0x0800627b
 800624c:	0800627b 	.word	0x0800627b
 8006250:	08006273 	.word	0x08006273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006254:	f7fd ff28 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8006258:	6178      	str	r0, [r7, #20]
        break;
 800625a:	e013      	b.n	8006284 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800625c:	f7fd ff3a 	bl	80040d4 <HAL_RCC_GetPCLK2Freq>
 8006260:	6178      	str	r0, [r7, #20]
        break;
 8006262:	e00f      	b.n	8006284 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006264:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <UART_SetConfig+0x510>)
 8006266:	617b      	str	r3, [r7, #20]
        break;
 8006268:	e00c      	b.n	8006284 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800626a:	f7fd fe85 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 800626e:	6178      	str	r0, [r7, #20]
        break;
 8006270:	e008      	b.n	8006284 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006276:	617b      	str	r3, [r7, #20]
        break;
 8006278:	e004      	b.n	8006284 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	76bb      	strb	r3, [r7, #26]
        break;
 8006282:	bf00      	nop
    }

    if (pclk != 0U)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d018      	beq.n	80062bc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	085a      	lsrs	r2, r3, #1
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	441a      	add	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	fbb2 f3f3 	udiv	r3, r2, r3
 800629c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	2b0f      	cmp	r3, #15
 80062a2:	d909      	bls.n	80062b8 <UART_SetConfig+0x4f4>
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062aa:	d205      	bcs.n	80062b8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60da      	str	r2, [r3, #12]
 80062b6:	e001      	b.n	80062bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80062c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3720      	adds	r7, #32
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bdb0      	pop	{r4, r5, r7, pc}
 80062d2:	bf00      	nop
 80062d4:	00f42400 	.word	0x00f42400

080062d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	f003 0310 	and.w	r3, r3, #16
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01a      	beq.n	80063ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063d6:	d10a      	bne.n	80063ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	605a      	str	r2, [r3, #4]
  }
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af02      	add	r7, sp, #8
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800642c:	f7fa ffd4 	bl	80013d8 <HAL_GetTick>
 8006430:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0308 	and.w	r3, r3, #8
 800643c:	2b08      	cmp	r3, #8
 800643e:	d10e      	bne.n	800645e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f82d 	bl	80064ae <UART_WaitOnFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e023      	b.n	80064a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b04      	cmp	r3, #4
 800646a:	d10e      	bne.n	800648a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800646c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f817 	bl	80064ae <UART_WaitOnFlagUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e00d      	b.n	80064a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b09c      	sub	sp, #112	; 0x70
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	603b      	str	r3, [r7, #0]
 80064ba:	4613      	mov	r3, r2
 80064bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064be:	e0a5      	b.n	800660c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c6:	f000 80a1 	beq.w	800660c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ca:	f7fa ff85 	bl	80013d8 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d302      	bcc.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80064da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d13e      	bne.n	800655e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80064ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064f4:	667b      	str	r3, [r7, #100]	; 0x64
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006500:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006504:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800650c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e6      	bne.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3308      	adds	r3, #8
 8006518:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006524:	f023 0301 	bic.w	r3, r3, #1
 8006528:	663b      	str	r3, [r7, #96]	; 0x60
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3308      	adds	r3, #8
 8006530:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006532:	64ba      	str	r2, [r7, #72]	; 0x48
 8006534:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006538:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e5      	bne.n	8006512 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e067      	b.n	800662e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d04f      	beq.n	800660c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800657a:	d147      	bne.n	800660c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006584:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800659a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a4:	637b      	str	r3, [r7, #52]	; 0x34
 80065a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e6      	bne.n	8006586 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3308      	adds	r3, #8
 80065be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	613b      	str	r3, [r7, #16]
   return(result);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f023 0301 	bic.w	r3, r3, #1
 80065ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3308      	adds	r3, #8
 80065d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065d8:	623a      	str	r2, [r7, #32]
 80065da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	69f9      	ldr	r1, [r7, #28]
 80065de:	6a3a      	ldr	r2, [r7, #32]
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e5      	bne.n	80065b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2220      	movs	r2, #32
 80065f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e010      	b.n	800662e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69da      	ldr	r2, [r3, #28]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	4013      	ands	r3, r2
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	429a      	cmp	r2, r3
 800661a:	bf0c      	ite	eq
 800661c:	2301      	moveq	r3, #1
 800661e:	2300      	movne	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	461a      	mov	r2, r3
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	429a      	cmp	r2, r3
 8006628:	f43f af4a 	beq.w	80064c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3770      	adds	r7, #112	; 0x70
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006636:	b084      	sub	sp, #16
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	f107 001c 	add.w	r0, r7, #28
 8006644:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fa6b 	bl	8006b30 <USB_CoreReset>
 800665a:	4603      	mov	r3, r0
 800665c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800665e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d106      	bne.n	8006672 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	639a      	str	r2, [r3, #56]	; 0x38
 8006670:	e005      	b.n	800667e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800667e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800668a:	b004      	add	sp, #16
 800668c:	4770      	bx	lr

0800668e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f023 0201 	bic.w	r2, r3, #1
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d115      	bne.n	80066fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066de:	2001      	movs	r0, #1
 80066e0:	f7fa fe86 	bl	80013f0 <HAL_Delay>
      ms++;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3301      	adds	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa12 	bl	8006b14 <USB_GetMode>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d01e      	beq.n	8006734 <USB_SetCurrentMode+0x84>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b31      	cmp	r3, #49	; 0x31
 80066fa:	d9f0      	bls.n	80066de <USB_SetCurrentMode+0x2e>
 80066fc:	e01a      	b.n	8006734 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066fe:	78fb      	ldrb	r3, [r7, #3]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d115      	bne.n	8006730 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006710:	2001      	movs	r0, #1
 8006712:	f7fa fe6d 	bl	80013f0 <HAL_Delay>
      ms++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3301      	adds	r3, #1
 800671a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f9f9 	bl	8006b14 <USB_GetMode>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d005      	beq.n	8006734 <USB_SetCurrentMode+0x84>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2b31      	cmp	r3, #49	; 0x31
 800672c:	d9f0      	bls.n	8006710 <USB_SetCurrentMode+0x60>
 800672e:	e001      	b.n	8006734 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e005      	b.n	8006740 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b32      	cmp	r3, #50	; 0x32
 8006738:	d101      	bne.n	800673e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e000      	b.n	8006740 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006748:	b084      	sub	sp, #16
 800674a:	b580      	push	{r7, lr}
 800674c:	b086      	sub	sp, #24
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006762:	2300      	movs	r3, #0
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	e009      	b.n	800677c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	3340      	adds	r3, #64	; 0x40
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	2200      	movs	r2, #0
 8006774:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	3301      	adds	r3, #1
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2b0e      	cmp	r3, #14
 8006780:	d9f2      	bls.n	8006768 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d11c      	bne.n	80067c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006796:	f043 0302 	orr.w	r3, r3, #2
 800679a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e005      	b.n	80067ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067d4:	461a      	mov	r2, r3
 80067d6:	2300      	movs	r3, #0
 80067d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e0:	4619      	mov	r1, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e8:	461a      	mov	r2, r3
 80067ea:	680b      	ldr	r3, [r1, #0]
 80067ec:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067ee:	2103      	movs	r1, #3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f955 	bl	8006aa0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067f6:	2110      	movs	r1, #16
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f8f1 	bl	80069e0 <USB_FlushTxFifo>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f91b 	bl	8006a44 <USB_FlushRxFifo>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681e:	461a      	mov	r2, r3
 8006820:	2300      	movs	r3, #0
 8006822:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682a:	461a      	mov	r2, r3
 800682c:	2300      	movs	r3, #0
 800682e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006836:	461a      	mov	r2, r3
 8006838:	2300      	movs	r3, #0
 800683a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800683c:	2300      	movs	r3, #0
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	e043      	b.n	80068ca <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006858:	d118      	bne.n	800688c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686c:	461a      	mov	r2, r3
 800686e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	e013      	b.n	800689e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006882:	461a      	mov	r2, r3
 8006884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	e008      	b.n	800689e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006898:	461a      	mov	r2, r3
 800689a:	2300      	movs	r3, #0
 800689c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068aa:	461a      	mov	r2, r3
 80068ac:	2300      	movs	r3, #0
 80068ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068bc:	461a      	mov	r2, r3
 80068be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	3301      	adds	r3, #1
 80068c8:	613b      	str	r3, [r7, #16]
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d3b7      	bcc.n	8006842 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	e043      	b.n	8006960 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ee:	d118      	bne.n	8006922 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006902:	461a      	mov	r2, r3
 8006904:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006908:	6013      	str	r3, [r2, #0]
 800690a:	e013      	b.n	8006934 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4413      	add	r3, r2
 8006914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006918:	461a      	mov	r2, r3
 800691a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	e008      	b.n	8006934 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692e:	461a      	mov	r2, r3
 8006930:	2300      	movs	r3, #0
 8006932:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006940:	461a      	mov	r2, r3
 8006942:	2300      	movs	r3, #0
 8006944:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006952:	461a      	mov	r2, r3
 8006954:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006958:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	3301      	adds	r3, #1
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	429a      	cmp	r2, r3
 8006966:	d3b7      	bcc.n	80068d8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800697a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006988:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	f043 0210 	orr.w	r2, r3, #16
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699a      	ldr	r2, [r3, #24]
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <USB_DevInit+0x294>)
 800699c:	4313      	orrs	r3, r2
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f043 0208 	orr.w	r2, r3, #8
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d107      	bne.n	80069ca <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069c2:	f043 0304 	orr.w	r3, r3, #4
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069d6:	b004      	add	sp, #16
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	803c3800 	.word	0x803c3800

080069e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3301      	adds	r3, #1
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	4a12      	ldr	r2, [pc, #72]	; (8006a40 <USB_FlushTxFifo+0x60>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e01a      	b.n	8006a34 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	daf3      	bge.n	80069ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	019b      	lsls	r3, r3, #6
 8006a0e:	f043 0220 	orr.w	r2, r3, #32
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	4a08      	ldr	r2, [pc, #32]	; (8006a40 <USB_FlushTxFifo+0x60>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d901      	bls.n	8006a26 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e006      	b.n	8006a34 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d0f1      	beq.n	8006a16 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	00030d40 	.word	0x00030d40

08006a44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	4a11      	ldr	r2, [pc, #68]	; (8006a9c <USB_FlushRxFifo+0x58>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d901      	bls.n	8006a60 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e017      	b.n	8006a90 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	daf3      	bge.n	8006a50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2210      	movs	r2, #16
 8006a70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3301      	adds	r3, #1
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	4a08      	ldr	r2, [pc, #32]	; (8006a9c <USB_FlushRxFifo+0x58>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d901      	bls.n	8006a82 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e006      	b.n	8006a90 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b10      	cmp	r3, #16
 8006a8c:	d0f1      	beq.n	8006a72 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	00030d40 	.word	0x00030d40

08006aa0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	68f9      	ldr	r1, [r7, #12]
 8006abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006aec:	f023 0303 	bic.w	r3, r3, #3
 8006af0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b00:	f043 0302 	orr.w	r3, r3, #2
 8006b04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	f003 0301 	and.w	r3, r3, #1
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	4a13      	ldr	r2, [pc, #76]	; (8006b90 <USB_CoreReset+0x60>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d901      	bls.n	8006b4c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e01a      	b.n	8006b82 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	daf3      	bge.n	8006b3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f043 0201 	orr.w	r2, r3, #1
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3301      	adds	r3, #1
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	4a09      	ldr	r2, [pc, #36]	; (8006b90 <USB_CoreReset+0x60>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d901      	bls.n	8006b74 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e006      	b.n	8006b82 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d0f1      	beq.n	8006b64 <USB_CoreReset+0x34>

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	00030d40 	.word	0x00030d40

08006b94 <__errno>:
 8006b94:	4b01      	ldr	r3, [pc, #4]	; (8006b9c <__errno+0x8>)
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	2000000c 	.word	0x2000000c

08006ba0 <__libc_init_array>:
 8006ba0:	b570      	push	{r4, r5, r6, lr}
 8006ba2:	4d0d      	ldr	r5, [pc, #52]	; (8006bd8 <__libc_init_array+0x38>)
 8006ba4:	4c0d      	ldr	r4, [pc, #52]	; (8006bdc <__libc_init_array+0x3c>)
 8006ba6:	1b64      	subs	r4, r4, r5
 8006ba8:	10a4      	asrs	r4, r4, #2
 8006baa:	2600      	movs	r6, #0
 8006bac:	42a6      	cmp	r6, r4
 8006bae:	d109      	bne.n	8006bc4 <__libc_init_array+0x24>
 8006bb0:	4d0b      	ldr	r5, [pc, #44]	; (8006be0 <__libc_init_array+0x40>)
 8006bb2:	4c0c      	ldr	r4, [pc, #48]	; (8006be4 <__libc_init_array+0x44>)
 8006bb4:	f000 fc4e 	bl	8007454 <_init>
 8006bb8:	1b64      	subs	r4, r4, r5
 8006bba:	10a4      	asrs	r4, r4, #2
 8006bbc:	2600      	movs	r6, #0
 8006bbe:	42a6      	cmp	r6, r4
 8006bc0:	d105      	bne.n	8006bce <__libc_init_array+0x2e>
 8006bc2:	bd70      	pop	{r4, r5, r6, pc}
 8006bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc8:	4798      	blx	r3
 8006bca:	3601      	adds	r6, #1
 8006bcc:	e7ee      	b.n	8006bac <__libc_init_array+0xc>
 8006bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bd2:	4798      	blx	r3
 8006bd4:	3601      	adds	r6, #1
 8006bd6:	e7f2      	b.n	8006bbe <__libc_init_array+0x1e>
 8006bd8:	080074f8 	.word	0x080074f8
 8006bdc:	080074f8 	.word	0x080074f8
 8006be0:	080074f8 	.word	0x080074f8
 8006be4:	080074fc 	.word	0x080074fc

08006be8 <memset>:
 8006be8:	4402      	add	r2, r0
 8006bea:	4603      	mov	r3, r0
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d100      	bne.n	8006bf2 <memset+0xa>
 8006bf0:	4770      	bx	lr
 8006bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf6:	e7f9      	b.n	8006bec <memset+0x4>

08006bf8 <siprintf>:
 8006bf8:	b40e      	push	{r1, r2, r3}
 8006bfa:	b500      	push	{lr}
 8006bfc:	b09c      	sub	sp, #112	; 0x70
 8006bfe:	ab1d      	add	r3, sp, #116	; 0x74
 8006c00:	9002      	str	r0, [sp, #8]
 8006c02:	9006      	str	r0, [sp, #24]
 8006c04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c08:	4809      	ldr	r0, [pc, #36]	; (8006c30 <siprintf+0x38>)
 8006c0a:	9107      	str	r1, [sp, #28]
 8006c0c:	9104      	str	r1, [sp, #16]
 8006c0e:	4909      	ldr	r1, [pc, #36]	; (8006c34 <siprintf+0x3c>)
 8006c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c14:	9105      	str	r1, [sp, #20]
 8006c16:	6800      	ldr	r0, [r0, #0]
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	a902      	add	r1, sp, #8
 8006c1c:	f000 f868 	bl	8006cf0 <_svfiprintf_r>
 8006c20:	9b02      	ldr	r3, [sp, #8]
 8006c22:	2200      	movs	r2, #0
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	b01c      	add	sp, #112	; 0x70
 8006c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c2c:	b003      	add	sp, #12
 8006c2e:	4770      	bx	lr
 8006c30:	2000000c 	.word	0x2000000c
 8006c34:	ffff0208 	.word	0xffff0208

08006c38 <__ssputs_r>:
 8006c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c3c:	688e      	ldr	r6, [r1, #8]
 8006c3e:	429e      	cmp	r6, r3
 8006c40:	4682      	mov	sl, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	4690      	mov	r8, r2
 8006c46:	461f      	mov	r7, r3
 8006c48:	d838      	bhi.n	8006cbc <__ssputs_r+0x84>
 8006c4a:	898a      	ldrh	r2, [r1, #12]
 8006c4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c50:	d032      	beq.n	8006cb8 <__ssputs_r+0x80>
 8006c52:	6825      	ldr	r5, [r4, #0]
 8006c54:	6909      	ldr	r1, [r1, #16]
 8006c56:	eba5 0901 	sub.w	r9, r5, r1
 8006c5a:	6965      	ldr	r5, [r4, #20]
 8006c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c64:	3301      	adds	r3, #1
 8006c66:	444b      	add	r3, r9
 8006c68:	106d      	asrs	r5, r5, #1
 8006c6a:	429d      	cmp	r5, r3
 8006c6c:	bf38      	it	cc
 8006c6e:	461d      	movcc	r5, r3
 8006c70:	0553      	lsls	r3, r2, #21
 8006c72:	d531      	bpl.n	8006cd8 <__ssputs_r+0xa0>
 8006c74:	4629      	mov	r1, r5
 8006c76:	f000 fb47 	bl	8007308 <_malloc_r>
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	b950      	cbnz	r0, 8006c94 <__ssputs_r+0x5c>
 8006c7e:	230c      	movs	r3, #12
 8006c80:	f8ca 3000 	str.w	r3, [sl]
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c8a:	81a3      	strh	r3, [r4, #12]
 8006c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c94:	6921      	ldr	r1, [r4, #16]
 8006c96:	464a      	mov	r2, r9
 8006c98:	f000 fabe 	bl	8007218 <memcpy>
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca6:	81a3      	strh	r3, [r4, #12]
 8006ca8:	6126      	str	r6, [r4, #16]
 8006caa:	6165      	str	r5, [r4, #20]
 8006cac:	444e      	add	r6, r9
 8006cae:	eba5 0509 	sub.w	r5, r5, r9
 8006cb2:	6026      	str	r6, [r4, #0]
 8006cb4:	60a5      	str	r5, [r4, #8]
 8006cb6:	463e      	mov	r6, r7
 8006cb8:	42be      	cmp	r6, r7
 8006cba:	d900      	bls.n	8006cbe <__ssputs_r+0x86>
 8006cbc:	463e      	mov	r6, r7
 8006cbe:	4632      	mov	r2, r6
 8006cc0:	6820      	ldr	r0, [r4, #0]
 8006cc2:	4641      	mov	r1, r8
 8006cc4:	f000 fab6 	bl	8007234 <memmove>
 8006cc8:	68a3      	ldr	r3, [r4, #8]
 8006cca:	6822      	ldr	r2, [r4, #0]
 8006ccc:	1b9b      	subs	r3, r3, r6
 8006cce:	4432      	add	r2, r6
 8006cd0:	60a3      	str	r3, [r4, #8]
 8006cd2:	6022      	str	r2, [r4, #0]
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	e7db      	b.n	8006c90 <__ssputs_r+0x58>
 8006cd8:	462a      	mov	r2, r5
 8006cda:	f000 fb6f 	bl	80073bc <_realloc_r>
 8006cde:	4606      	mov	r6, r0
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d1e1      	bne.n	8006ca8 <__ssputs_r+0x70>
 8006ce4:	6921      	ldr	r1, [r4, #16]
 8006ce6:	4650      	mov	r0, sl
 8006ce8:	f000 fabe 	bl	8007268 <_free_r>
 8006cec:	e7c7      	b.n	8006c7e <__ssputs_r+0x46>
	...

08006cf0 <_svfiprintf_r>:
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	4698      	mov	r8, r3
 8006cf6:	898b      	ldrh	r3, [r1, #12]
 8006cf8:	061b      	lsls	r3, r3, #24
 8006cfa:	b09d      	sub	sp, #116	; 0x74
 8006cfc:	4607      	mov	r7, r0
 8006cfe:	460d      	mov	r5, r1
 8006d00:	4614      	mov	r4, r2
 8006d02:	d50e      	bpl.n	8006d22 <_svfiprintf_r+0x32>
 8006d04:	690b      	ldr	r3, [r1, #16]
 8006d06:	b963      	cbnz	r3, 8006d22 <_svfiprintf_r+0x32>
 8006d08:	2140      	movs	r1, #64	; 0x40
 8006d0a:	f000 fafd 	bl	8007308 <_malloc_r>
 8006d0e:	6028      	str	r0, [r5, #0]
 8006d10:	6128      	str	r0, [r5, #16]
 8006d12:	b920      	cbnz	r0, 8006d1e <_svfiprintf_r+0x2e>
 8006d14:	230c      	movs	r3, #12
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d1c:	e0d1      	b.n	8006ec2 <_svfiprintf_r+0x1d2>
 8006d1e:	2340      	movs	r3, #64	; 0x40
 8006d20:	616b      	str	r3, [r5, #20]
 8006d22:	2300      	movs	r3, #0
 8006d24:	9309      	str	r3, [sp, #36]	; 0x24
 8006d26:	2320      	movs	r3, #32
 8006d28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d30:	2330      	movs	r3, #48	; 0x30
 8006d32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006edc <_svfiprintf_r+0x1ec>
 8006d36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d3a:	f04f 0901 	mov.w	r9, #1
 8006d3e:	4623      	mov	r3, r4
 8006d40:	469a      	mov	sl, r3
 8006d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d46:	b10a      	cbz	r2, 8006d4c <_svfiprintf_r+0x5c>
 8006d48:	2a25      	cmp	r2, #37	; 0x25
 8006d4a:	d1f9      	bne.n	8006d40 <_svfiprintf_r+0x50>
 8006d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8006d50:	d00b      	beq.n	8006d6a <_svfiprintf_r+0x7a>
 8006d52:	465b      	mov	r3, fp
 8006d54:	4622      	mov	r2, r4
 8006d56:	4629      	mov	r1, r5
 8006d58:	4638      	mov	r0, r7
 8006d5a:	f7ff ff6d 	bl	8006c38 <__ssputs_r>
 8006d5e:	3001      	adds	r0, #1
 8006d60:	f000 80aa 	beq.w	8006eb8 <_svfiprintf_r+0x1c8>
 8006d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d66:	445a      	add	r2, fp
 8006d68:	9209      	str	r2, [sp, #36]	; 0x24
 8006d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 80a2 	beq.w	8006eb8 <_svfiprintf_r+0x1c8>
 8006d74:	2300      	movs	r3, #0
 8006d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d7e:	f10a 0a01 	add.w	sl, sl, #1
 8006d82:	9304      	str	r3, [sp, #16]
 8006d84:	9307      	str	r3, [sp, #28]
 8006d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8006d8c:	4654      	mov	r4, sl
 8006d8e:	2205      	movs	r2, #5
 8006d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d94:	4851      	ldr	r0, [pc, #324]	; (8006edc <_svfiprintf_r+0x1ec>)
 8006d96:	f7f9 fa23 	bl	80001e0 <memchr>
 8006d9a:	9a04      	ldr	r2, [sp, #16]
 8006d9c:	b9d8      	cbnz	r0, 8006dd6 <_svfiprintf_r+0xe6>
 8006d9e:	06d0      	lsls	r0, r2, #27
 8006da0:	bf44      	itt	mi
 8006da2:	2320      	movmi	r3, #32
 8006da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006da8:	0711      	lsls	r1, r2, #28
 8006daa:	bf44      	itt	mi
 8006dac:	232b      	movmi	r3, #43	; 0x2b
 8006dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006db2:	f89a 3000 	ldrb.w	r3, [sl]
 8006db6:	2b2a      	cmp	r3, #42	; 0x2a
 8006db8:	d015      	beq.n	8006de6 <_svfiprintf_r+0xf6>
 8006dba:	9a07      	ldr	r2, [sp, #28]
 8006dbc:	4654      	mov	r4, sl
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	f04f 0c0a 	mov.w	ip, #10
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dca:	3b30      	subs	r3, #48	; 0x30
 8006dcc:	2b09      	cmp	r3, #9
 8006dce:	d94e      	bls.n	8006e6e <_svfiprintf_r+0x17e>
 8006dd0:	b1b0      	cbz	r0, 8006e00 <_svfiprintf_r+0x110>
 8006dd2:	9207      	str	r2, [sp, #28]
 8006dd4:	e014      	b.n	8006e00 <_svfiprintf_r+0x110>
 8006dd6:	eba0 0308 	sub.w	r3, r0, r8
 8006dda:	fa09 f303 	lsl.w	r3, r9, r3
 8006dde:	4313      	orrs	r3, r2
 8006de0:	9304      	str	r3, [sp, #16]
 8006de2:	46a2      	mov	sl, r4
 8006de4:	e7d2      	b.n	8006d8c <_svfiprintf_r+0x9c>
 8006de6:	9b03      	ldr	r3, [sp, #12]
 8006de8:	1d19      	adds	r1, r3, #4
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	9103      	str	r1, [sp, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	bfbb      	ittet	lt
 8006df2:	425b      	neglt	r3, r3
 8006df4:	f042 0202 	orrlt.w	r2, r2, #2
 8006df8:	9307      	strge	r3, [sp, #28]
 8006dfa:	9307      	strlt	r3, [sp, #28]
 8006dfc:	bfb8      	it	lt
 8006dfe:	9204      	strlt	r2, [sp, #16]
 8006e00:	7823      	ldrb	r3, [r4, #0]
 8006e02:	2b2e      	cmp	r3, #46	; 0x2e
 8006e04:	d10c      	bne.n	8006e20 <_svfiprintf_r+0x130>
 8006e06:	7863      	ldrb	r3, [r4, #1]
 8006e08:	2b2a      	cmp	r3, #42	; 0x2a
 8006e0a:	d135      	bne.n	8006e78 <_svfiprintf_r+0x188>
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	1d1a      	adds	r2, r3, #4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	9203      	str	r2, [sp, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	bfb8      	it	lt
 8006e18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e1c:	3402      	adds	r4, #2
 8006e1e:	9305      	str	r3, [sp, #20]
 8006e20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006eec <_svfiprintf_r+0x1fc>
 8006e24:	7821      	ldrb	r1, [r4, #0]
 8006e26:	2203      	movs	r2, #3
 8006e28:	4650      	mov	r0, sl
 8006e2a:	f7f9 f9d9 	bl	80001e0 <memchr>
 8006e2e:	b140      	cbz	r0, 8006e42 <_svfiprintf_r+0x152>
 8006e30:	2340      	movs	r3, #64	; 0x40
 8006e32:	eba0 000a 	sub.w	r0, r0, sl
 8006e36:	fa03 f000 	lsl.w	r0, r3, r0
 8006e3a:	9b04      	ldr	r3, [sp, #16]
 8006e3c:	4303      	orrs	r3, r0
 8006e3e:	3401      	adds	r4, #1
 8006e40:	9304      	str	r3, [sp, #16]
 8006e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e46:	4826      	ldr	r0, [pc, #152]	; (8006ee0 <_svfiprintf_r+0x1f0>)
 8006e48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e4c:	2206      	movs	r2, #6
 8006e4e:	f7f9 f9c7 	bl	80001e0 <memchr>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d038      	beq.n	8006ec8 <_svfiprintf_r+0x1d8>
 8006e56:	4b23      	ldr	r3, [pc, #140]	; (8006ee4 <_svfiprintf_r+0x1f4>)
 8006e58:	bb1b      	cbnz	r3, 8006ea2 <_svfiprintf_r+0x1b2>
 8006e5a:	9b03      	ldr	r3, [sp, #12]
 8006e5c:	3307      	adds	r3, #7
 8006e5e:	f023 0307 	bic.w	r3, r3, #7
 8006e62:	3308      	adds	r3, #8
 8006e64:	9303      	str	r3, [sp, #12]
 8006e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e68:	4433      	add	r3, r6
 8006e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6c:	e767      	b.n	8006d3e <_svfiprintf_r+0x4e>
 8006e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e72:	460c      	mov	r4, r1
 8006e74:	2001      	movs	r0, #1
 8006e76:	e7a5      	b.n	8006dc4 <_svfiprintf_r+0xd4>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	3401      	adds	r4, #1
 8006e7c:	9305      	str	r3, [sp, #20]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	f04f 0c0a 	mov.w	ip, #10
 8006e84:	4620      	mov	r0, r4
 8006e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e8a:	3a30      	subs	r2, #48	; 0x30
 8006e8c:	2a09      	cmp	r2, #9
 8006e8e:	d903      	bls.n	8006e98 <_svfiprintf_r+0x1a8>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0c5      	beq.n	8006e20 <_svfiprintf_r+0x130>
 8006e94:	9105      	str	r1, [sp, #20]
 8006e96:	e7c3      	b.n	8006e20 <_svfiprintf_r+0x130>
 8006e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e7f0      	b.n	8006e84 <_svfiprintf_r+0x194>
 8006ea2:	ab03      	add	r3, sp, #12
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	462a      	mov	r2, r5
 8006ea8:	4b0f      	ldr	r3, [pc, #60]	; (8006ee8 <_svfiprintf_r+0x1f8>)
 8006eaa:	a904      	add	r1, sp, #16
 8006eac:	4638      	mov	r0, r7
 8006eae:	f3af 8000 	nop.w
 8006eb2:	1c42      	adds	r2, r0, #1
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	d1d6      	bne.n	8006e66 <_svfiprintf_r+0x176>
 8006eb8:	89ab      	ldrh	r3, [r5, #12]
 8006eba:	065b      	lsls	r3, r3, #25
 8006ebc:	f53f af2c 	bmi.w	8006d18 <_svfiprintf_r+0x28>
 8006ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ec2:	b01d      	add	sp, #116	; 0x74
 8006ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec8:	ab03      	add	r3, sp, #12
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	462a      	mov	r2, r5
 8006ece:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <_svfiprintf_r+0x1f8>)
 8006ed0:	a904      	add	r1, sp, #16
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	f000 f87a 	bl	8006fcc <_printf_i>
 8006ed8:	e7eb      	b.n	8006eb2 <_svfiprintf_r+0x1c2>
 8006eda:	bf00      	nop
 8006edc:	080074bc 	.word	0x080074bc
 8006ee0:	080074c6 	.word	0x080074c6
 8006ee4:	00000000 	.word	0x00000000
 8006ee8:	08006c39 	.word	0x08006c39
 8006eec:	080074c2 	.word	0x080074c2

08006ef0 <_printf_common>:
 8006ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef4:	4616      	mov	r6, r2
 8006ef6:	4699      	mov	r9, r3
 8006ef8:	688a      	ldr	r2, [r1, #8]
 8006efa:	690b      	ldr	r3, [r1, #16]
 8006efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f00:	4293      	cmp	r3, r2
 8006f02:	bfb8      	it	lt
 8006f04:	4613      	movlt	r3, r2
 8006f06:	6033      	str	r3, [r6, #0]
 8006f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	b10a      	cbz	r2, 8006f16 <_printf_common+0x26>
 8006f12:	3301      	adds	r3, #1
 8006f14:	6033      	str	r3, [r6, #0]
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	0699      	lsls	r1, r3, #26
 8006f1a:	bf42      	ittt	mi
 8006f1c:	6833      	ldrmi	r3, [r6, #0]
 8006f1e:	3302      	addmi	r3, #2
 8006f20:	6033      	strmi	r3, [r6, #0]
 8006f22:	6825      	ldr	r5, [r4, #0]
 8006f24:	f015 0506 	ands.w	r5, r5, #6
 8006f28:	d106      	bne.n	8006f38 <_printf_common+0x48>
 8006f2a:	f104 0a19 	add.w	sl, r4, #25
 8006f2e:	68e3      	ldr	r3, [r4, #12]
 8006f30:	6832      	ldr	r2, [r6, #0]
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	42ab      	cmp	r3, r5
 8006f36:	dc26      	bgt.n	8006f86 <_printf_common+0x96>
 8006f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f3c:	1e13      	subs	r3, r2, #0
 8006f3e:	6822      	ldr	r2, [r4, #0]
 8006f40:	bf18      	it	ne
 8006f42:	2301      	movne	r3, #1
 8006f44:	0692      	lsls	r2, r2, #26
 8006f46:	d42b      	bmi.n	8006fa0 <_printf_common+0xb0>
 8006f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	4638      	mov	r0, r7
 8006f50:	47c0      	blx	r8
 8006f52:	3001      	adds	r0, #1
 8006f54:	d01e      	beq.n	8006f94 <_printf_common+0xa4>
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	68e5      	ldr	r5, [r4, #12]
 8006f5a:	6832      	ldr	r2, [r6, #0]
 8006f5c:	f003 0306 	and.w	r3, r3, #6
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	bf08      	it	eq
 8006f64:	1aad      	subeq	r5, r5, r2
 8006f66:	68a3      	ldr	r3, [r4, #8]
 8006f68:	6922      	ldr	r2, [r4, #16]
 8006f6a:	bf0c      	ite	eq
 8006f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f70:	2500      	movne	r5, #0
 8006f72:	4293      	cmp	r3, r2
 8006f74:	bfc4      	itt	gt
 8006f76:	1a9b      	subgt	r3, r3, r2
 8006f78:	18ed      	addgt	r5, r5, r3
 8006f7a:	2600      	movs	r6, #0
 8006f7c:	341a      	adds	r4, #26
 8006f7e:	42b5      	cmp	r5, r6
 8006f80:	d11a      	bne.n	8006fb8 <_printf_common+0xc8>
 8006f82:	2000      	movs	r0, #0
 8006f84:	e008      	b.n	8006f98 <_printf_common+0xa8>
 8006f86:	2301      	movs	r3, #1
 8006f88:	4652      	mov	r2, sl
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	47c0      	blx	r8
 8006f90:	3001      	adds	r0, #1
 8006f92:	d103      	bne.n	8006f9c <_printf_common+0xac>
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9c:	3501      	adds	r5, #1
 8006f9e:	e7c6      	b.n	8006f2e <_printf_common+0x3e>
 8006fa0:	18e1      	adds	r1, r4, r3
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	2030      	movs	r0, #48	; 0x30
 8006fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006faa:	4422      	add	r2, r4
 8006fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fb4:	3302      	adds	r3, #2
 8006fb6:	e7c7      	b.n	8006f48 <_printf_common+0x58>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	4622      	mov	r2, r4
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	47c0      	blx	r8
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	d0e6      	beq.n	8006f94 <_printf_common+0xa4>
 8006fc6:	3601      	adds	r6, #1
 8006fc8:	e7d9      	b.n	8006f7e <_printf_common+0x8e>
	...

08006fcc <_printf_i>:
 8006fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	4691      	mov	r9, r2
 8006fd4:	7e27      	ldrb	r7, [r4, #24]
 8006fd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006fd8:	2f78      	cmp	r7, #120	; 0x78
 8006fda:	4680      	mov	r8, r0
 8006fdc:	469a      	mov	sl, r3
 8006fde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fe2:	d807      	bhi.n	8006ff4 <_printf_i+0x28>
 8006fe4:	2f62      	cmp	r7, #98	; 0x62
 8006fe6:	d80a      	bhi.n	8006ffe <_printf_i+0x32>
 8006fe8:	2f00      	cmp	r7, #0
 8006fea:	f000 80d8 	beq.w	800719e <_printf_i+0x1d2>
 8006fee:	2f58      	cmp	r7, #88	; 0x58
 8006ff0:	f000 80a3 	beq.w	800713a <_printf_i+0x16e>
 8006ff4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ffc:	e03a      	b.n	8007074 <_printf_i+0xa8>
 8006ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007002:	2b15      	cmp	r3, #21
 8007004:	d8f6      	bhi.n	8006ff4 <_printf_i+0x28>
 8007006:	a001      	add	r0, pc, #4	; (adr r0, 800700c <_printf_i+0x40>)
 8007008:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800700c:	08007065 	.word	0x08007065
 8007010:	08007079 	.word	0x08007079
 8007014:	08006ff5 	.word	0x08006ff5
 8007018:	08006ff5 	.word	0x08006ff5
 800701c:	08006ff5 	.word	0x08006ff5
 8007020:	08006ff5 	.word	0x08006ff5
 8007024:	08007079 	.word	0x08007079
 8007028:	08006ff5 	.word	0x08006ff5
 800702c:	08006ff5 	.word	0x08006ff5
 8007030:	08006ff5 	.word	0x08006ff5
 8007034:	08006ff5 	.word	0x08006ff5
 8007038:	08007185 	.word	0x08007185
 800703c:	080070a9 	.word	0x080070a9
 8007040:	08007167 	.word	0x08007167
 8007044:	08006ff5 	.word	0x08006ff5
 8007048:	08006ff5 	.word	0x08006ff5
 800704c:	080071a7 	.word	0x080071a7
 8007050:	08006ff5 	.word	0x08006ff5
 8007054:	080070a9 	.word	0x080070a9
 8007058:	08006ff5 	.word	0x08006ff5
 800705c:	08006ff5 	.word	0x08006ff5
 8007060:	0800716f 	.word	0x0800716f
 8007064:	680b      	ldr	r3, [r1, #0]
 8007066:	1d1a      	adds	r2, r3, #4
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	600a      	str	r2, [r1, #0]
 800706c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007074:	2301      	movs	r3, #1
 8007076:	e0a3      	b.n	80071c0 <_printf_i+0x1f4>
 8007078:	6825      	ldr	r5, [r4, #0]
 800707a:	6808      	ldr	r0, [r1, #0]
 800707c:	062e      	lsls	r6, r5, #24
 800707e:	f100 0304 	add.w	r3, r0, #4
 8007082:	d50a      	bpl.n	800709a <_printf_i+0xce>
 8007084:	6805      	ldr	r5, [r0, #0]
 8007086:	600b      	str	r3, [r1, #0]
 8007088:	2d00      	cmp	r5, #0
 800708a:	da03      	bge.n	8007094 <_printf_i+0xc8>
 800708c:	232d      	movs	r3, #45	; 0x2d
 800708e:	426d      	negs	r5, r5
 8007090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007094:	485e      	ldr	r0, [pc, #376]	; (8007210 <_printf_i+0x244>)
 8007096:	230a      	movs	r3, #10
 8007098:	e019      	b.n	80070ce <_printf_i+0x102>
 800709a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800709e:	6805      	ldr	r5, [r0, #0]
 80070a0:	600b      	str	r3, [r1, #0]
 80070a2:	bf18      	it	ne
 80070a4:	b22d      	sxthne	r5, r5
 80070a6:	e7ef      	b.n	8007088 <_printf_i+0xbc>
 80070a8:	680b      	ldr	r3, [r1, #0]
 80070aa:	6825      	ldr	r5, [r4, #0]
 80070ac:	1d18      	adds	r0, r3, #4
 80070ae:	6008      	str	r0, [r1, #0]
 80070b0:	0628      	lsls	r0, r5, #24
 80070b2:	d501      	bpl.n	80070b8 <_printf_i+0xec>
 80070b4:	681d      	ldr	r5, [r3, #0]
 80070b6:	e002      	b.n	80070be <_printf_i+0xf2>
 80070b8:	0669      	lsls	r1, r5, #25
 80070ba:	d5fb      	bpl.n	80070b4 <_printf_i+0xe8>
 80070bc:	881d      	ldrh	r5, [r3, #0]
 80070be:	4854      	ldr	r0, [pc, #336]	; (8007210 <_printf_i+0x244>)
 80070c0:	2f6f      	cmp	r7, #111	; 0x6f
 80070c2:	bf0c      	ite	eq
 80070c4:	2308      	moveq	r3, #8
 80070c6:	230a      	movne	r3, #10
 80070c8:	2100      	movs	r1, #0
 80070ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070ce:	6866      	ldr	r6, [r4, #4]
 80070d0:	60a6      	str	r6, [r4, #8]
 80070d2:	2e00      	cmp	r6, #0
 80070d4:	bfa2      	ittt	ge
 80070d6:	6821      	ldrge	r1, [r4, #0]
 80070d8:	f021 0104 	bicge.w	r1, r1, #4
 80070dc:	6021      	strge	r1, [r4, #0]
 80070de:	b90d      	cbnz	r5, 80070e4 <_printf_i+0x118>
 80070e0:	2e00      	cmp	r6, #0
 80070e2:	d04d      	beq.n	8007180 <_printf_i+0x1b4>
 80070e4:	4616      	mov	r6, r2
 80070e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80070ea:	fb03 5711 	mls	r7, r3, r1, r5
 80070ee:	5dc7      	ldrb	r7, [r0, r7]
 80070f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070f4:	462f      	mov	r7, r5
 80070f6:	42bb      	cmp	r3, r7
 80070f8:	460d      	mov	r5, r1
 80070fa:	d9f4      	bls.n	80070e6 <_printf_i+0x11a>
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d10b      	bne.n	8007118 <_printf_i+0x14c>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	07df      	lsls	r7, r3, #31
 8007104:	d508      	bpl.n	8007118 <_printf_i+0x14c>
 8007106:	6923      	ldr	r3, [r4, #16]
 8007108:	6861      	ldr	r1, [r4, #4]
 800710a:	4299      	cmp	r1, r3
 800710c:	bfde      	ittt	le
 800710e:	2330      	movle	r3, #48	; 0x30
 8007110:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007114:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007118:	1b92      	subs	r2, r2, r6
 800711a:	6122      	str	r2, [r4, #16]
 800711c:	f8cd a000 	str.w	sl, [sp]
 8007120:	464b      	mov	r3, r9
 8007122:	aa03      	add	r2, sp, #12
 8007124:	4621      	mov	r1, r4
 8007126:	4640      	mov	r0, r8
 8007128:	f7ff fee2 	bl	8006ef0 <_printf_common>
 800712c:	3001      	adds	r0, #1
 800712e:	d14c      	bne.n	80071ca <_printf_i+0x1fe>
 8007130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007134:	b004      	add	sp, #16
 8007136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713a:	4835      	ldr	r0, [pc, #212]	; (8007210 <_printf_i+0x244>)
 800713c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	680e      	ldr	r6, [r1, #0]
 8007144:	061f      	lsls	r7, r3, #24
 8007146:	f856 5b04 	ldr.w	r5, [r6], #4
 800714a:	600e      	str	r6, [r1, #0]
 800714c:	d514      	bpl.n	8007178 <_printf_i+0x1ac>
 800714e:	07d9      	lsls	r1, r3, #31
 8007150:	bf44      	itt	mi
 8007152:	f043 0320 	orrmi.w	r3, r3, #32
 8007156:	6023      	strmi	r3, [r4, #0]
 8007158:	b91d      	cbnz	r5, 8007162 <_printf_i+0x196>
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	f023 0320 	bic.w	r3, r3, #32
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	2310      	movs	r3, #16
 8007164:	e7b0      	b.n	80070c8 <_printf_i+0xfc>
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	f043 0320 	orr.w	r3, r3, #32
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	2378      	movs	r3, #120	; 0x78
 8007170:	4828      	ldr	r0, [pc, #160]	; (8007214 <_printf_i+0x248>)
 8007172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007176:	e7e3      	b.n	8007140 <_printf_i+0x174>
 8007178:	065e      	lsls	r6, r3, #25
 800717a:	bf48      	it	mi
 800717c:	b2ad      	uxthmi	r5, r5
 800717e:	e7e6      	b.n	800714e <_printf_i+0x182>
 8007180:	4616      	mov	r6, r2
 8007182:	e7bb      	b.n	80070fc <_printf_i+0x130>
 8007184:	680b      	ldr	r3, [r1, #0]
 8007186:	6826      	ldr	r6, [r4, #0]
 8007188:	6960      	ldr	r0, [r4, #20]
 800718a:	1d1d      	adds	r5, r3, #4
 800718c:	600d      	str	r5, [r1, #0]
 800718e:	0635      	lsls	r5, r6, #24
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	d501      	bpl.n	8007198 <_printf_i+0x1cc>
 8007194:	6018      	str	r0, [r3, #0]
 8007196:	e002      	b.n	800719e <_printf_i+0x1d2>
 8007198:	0671      	lsls	r1, r6, #25
 800719a:	d5fb      	bpl.n	8007194 <_printf_i+0x1c8>
 800719c:	8018      	strh	r0, [r3, #0]
 800719e:	2300      	movs	r3, #0
 80071a0:	6123      	str	r3, [r4, #16]
 80071a2:	4616      	mov	r6, r2
 80071a4:	e7ba      	b.n	800711c <_printf_i+0x150>
 80071a6:	680b      	ldr	r3, [r1, #0]
 80071a8:	1d1a      	adds	r2, r3, #4
 80071aa:	600a      	str	r2, [r1, #0]
 80071ac:	681e      	ldr	r6, [r3, #0]
 80071ae:	6862      	ldr	r2, [r4, #4]
 80071b0:	2100      	movs	r1, #0
 80071b2:	4630      	mov	r0, r6
 80071b4:	f7f9 f814 	bl	80001e0 <memchr>
 80071b8:	b108      	cbz	r0, 80071be <_printf_i+0x1f2>
 80071ba:	1b80      	subs	r0, r0, r6
 80071bc:	6060      	str	r0, [r4, #4]
 80071be:	6863      	ldr	r3, [r4, #4]
 80071c0:	6123      	str	r3, [r4, #16]
 80071c2:	2300      	movs	r3, #0
 80071c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071c8:	e7a8      	b.n	800711c <_printf_i+0x150>
 80071ca:	6923      	ldr	r3, [r4, #16]
 80071cc:	4632      	mov	r2, r6
 80071ce:	4649      	mov	r1, r9
 80071d0:	4640      	mov	r0, r8
 80071d2:	47d0      	blx	sl
 80071d4:	3001      	adds	r0, #1
 80071d6:	d0ab      	beq.n	8007130 <_printf_i+0x164>
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	079b      	lsls	r3, r3, #30
 80071dc:	d413      	bmi.n	8007206 <_printf_i+0x23a>
 80071de:	68e0      	ldr	r0, [r4, #12]
 80071e0:	9b03      	ldr	r3, [sp, #12]
 80071e2:	4298      	cmp	r0, r3
 80071e4:	bfb8      	it	lt
 80071e6:	4618      	movlt	r0, r3
 80071e8:	e7a4      	b.n	8007134 <_printf_i+0x168>
 80071ea:	2301      	movs	r3, #1
 80071ec:	4632      	mov	r2, r6
 80071ee:	4649      	mov	r1, r9
 80071f0:	4640      	mov	r0, r8
 80071f2:	47d0      	blx	sl
 80071f4:	3001      	adds	r0, #1
 80071f6:	d09b      	beq.n	8007130 <_printf_i+0x164>
 80071f8:	3501      	adds	r5, #1
 80071fa:	68e3      	ldr	r3, [r4, #12]
 80071fc:	9903      	ldr	r1, [sp, #12]
 80071fe:	1a5b      	subs	r3, r3, r1
 8007200:	42ab      	cmp	r3, r5
 8007202:	dcf2      	bgt.n	80071ea <_printf_i+0x21e>
 8007204:	e7eb      	b.n	80071de <_printf_i+0x212>
 8007206:	2500      	movs	r5, #0
 8007208:	f104 0619 	add.w	r6, r4, #25
 800720c:	e7f5      	b.n	80071fa <_printf_i+0x22e>
 800720e:	bf00      	nop
 8007210:	080074cd 	.word	0x080074cd
 8007214:	080074de 	.word	0x080074de

08007218 <memcpy>:
 8007218:	440a      	add	r2, r1
 800721a:	4291      	cmp	r1, r2
 800721c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007220:	d100      	bne.n	8007224 <memcpy+0xc>
 8007222:	4770      	bx	lr
 8007224:	b510      	push	{r4, lr}
 8007226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800722a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800722e:	4291      	cmp	r1, r2
 8007230:	d1f9      	bne.n	8007226 <memcpy+0xe>
 8007232:	bd10      	pop	{r4, pc}

08007234 <memmove>:
 8007234:	4288      	cmp	r0, r1
 8007236:	b510      	push	{r4, lr}
 8007238:	eb01 0402 	add.w	r4, r1, r2
 800723c:	d902      	bls.n	8007244 <memmove+0x10>
 800723e:	4284      	cmp	r4, r0
 8007240:	4623      	mov	r3, r4
 8007242:	d807      	bhi.n	8007254 <memmove+0x20>
 8007244:	1e43      	subs	r3, r0, #1
 8007246:	42a1      	cmp	r1, r4
 8007248:	d008      	beq.n	800725c <memmove+0x28>
 800724a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800724e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007252:	e7f8      	b.n	8007246 <memmove+0x12>
 8007254:	4402      	add	r2, r0
 8007256:	4601      	mov	r1, r0
 8007258:	428a      	cmp	r2, r1
 800725a:	d100      	bne.n	800725e <memmove+0x2a>
 800725c:	bd10      	pop	{r4, pc}
 800725e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007266:	e7f7      	b.n	8007258 <memmove+0x24>

08007268 <_free_r>:
 8007268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800726a:	2900      	cmp	r1, #0
 800726c:	d048      	beq.n	8007300 <_free_r+0x98>
 800726e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007272:	9001      	str	r0, [sp, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	f1a1 0404 	sub.w	r4, r1, #4
 800727a:	bfb8      	it	lt
 800727c:	18e4      	addlt	r4, r4, r3
 800727e:	f000 f8d3 	bl	8007428 <__malloc_lock>
 8007282:	4a20      	ldr	r2, [pc, #128]	; (8007304 <_free_r+0x9c>)
 8007284:	9801      	ldr	r0, [sp, #4]
 8007286:	6813      	ldr	r3, [r2, #0]
 8007288:	4615      	mov	r5, r2
 800728a:	b933      	cbnz	r3, 800729a <_free_r+0x32>
 800728c:	6063      	str	r3, [r4, #4]
 800728e:	6014      	str	r4, [r2, #0]
 8007290:	b003      	add	sp, #12
 8007292:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007296:	f000 b8cd 	b.w	8007434 <__malloc_unlock>
 800729a:	42a3      	cmp	r3, r4
 800729c:	d90b      	bls.n	80072b6 <_free_r+0x4e>
 800729e:	6821      	ldr	r1, [r4, #0]
 80072a0:	1862      	adds	r2, r4, r1
 80072a2:	4293      	cmp	r3, r2
 80072a4:	bf04      	itt	eq
 80072a6:	681a      	ldreq	r2, [r3, #0]
 80072a8:	685b      	ldreq	r3, [r3, #4]
 80072aa:	6063      	str	r3, [r4, #4]
 80072ac:	bf04      	itt	eq
 80072ae:	1852      	addeq	r2, r2, r1
 80072b0:	6022      	streq	r2, [r4, #0]
 80072b2:	602c      	str	r4, [r5, #0]
 80072b4:	e7ec      	b.n	8007290 <_free_r+0x28>
 80072b6:	461a      	mov	r2, r3
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	b10b      	cbz	r3, 80072c0 <_free_r+0x58>
 80072bc:	42a3      	cmp	r3, r4
 80072be:	d9fa      	bls.n	80072b6 <_free_r+0x4e>
 80072c0:	6811      	ldr	r1, [r2, #0]
 80072c2:	1855      	adds	r5, r2, r1
 80072c4:	42a5      	cmp	r5, r4
 80072c6:	d10b      	bne.n	80072e0 <_free_r+0x78>
 80072c8:	6824      	ldr	r4, [r4, #0]
 80072ca:	4421      	add	r1, r4
 80072cc:	1854      	adds	r4, r2, r1
 80072ce:	42a3      	cmp	r3, r4
 80072d0:	6011      	str	r1, [r2, #0]
 80072d2:	d1dd      	bne.n	8007290 <_free_r+0x28>
 80072d4:	681c      	ldr	r4, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	6053      	str	r3, [r2, #4]
 80072da:	4421      	add	r1, r4
 80072dc:	6011      	str	r1, [r2, #0]
 80072de:	e7d7      	b.n	8007290 <_free_r+0x28>
 80072e0:	d902      	bls.n	80072e8 <_free_r+0x80>
 80072e2:	230c      	movs	r3, #12
 80072e4:	6003      	str	r3, [r0, #0]
 80072e6:	e7d3      	b.n	8007290 <_free_r+0x28>
 80072e8:	6825      	ldr	r5, [r4, #0]
 80072ea:	1961      	adds	r1, r4, r5
 80072ec:	428b      	cmp	r3, r1
 80072ee:	bf04      	itt	eq
 80072f0:	6819      	ldreq	r1, [r3, #0]
 80072f2:	685b      	ldreq	r3, [r3, #4]
 80072f4:	6063      	str	r3, [r4, #4]
 80072f6:	bf04      	itt	eq
 80072f8:	1949      	addeq	r1, r1, r5
 80072fa:	6021      	streq	r1, [r4, #0]
 80072fc:	6054      	str	r4, [r2, #4]
 80072fe:	e7c7      	b.n	8007290 <_free_r+0x28>
 8007300:	b003      	add	sp, #12
 8007302:	bd30      	pop	{r4, r5, pc}
 8007304:	20000090 	.word	0x20000090

08007308 <_malloc_r>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	1ccd      	adds	r5, r1, #3
 800730c:	f025 0503 	bic.w	r5, r5, #3
 8007310:	3508      	adds	r5, #8
 8007312:	2d0c      	cmp	r5, #12
 8007314:	bf38      	it	cc
 8007316:	250c      	movcc	r5, #12
 8007318:	2d00      	cmp	r5, #0
 800731a:	4606      	mov	r6, r0
 800731c:	db01      	blt.n	8007322 <_malloc_r+0x1a>
 800731e:	42a9      	cmp	r1, r5
 8007320:	d903      	bls.n	800732a <_malloc_r+0x22>
 8007322:	230c      	movs	r3, #12
 8007324:	6033      	str	r3, [r6, #0]
 8007326:	2000      	movs	r0, #0
 8007328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800732a:	f000 f87d 	bl	8007428 <__malloc_lock>
 800732e:	4921      	ldr	r1, [pc, #132]	; (80073b4 <_malloc_r+0xac>)
 8007330:	680a      	ldr	r2, [r1, #0]
 8007332:	4614      	mov	r4, r2
 8007334:	b99c      	cbnz	r4, 800735e <_malloc_r+0x56>
 8007336:	4f20      	ldr	r7, [pc, #128]	; (80073b8 <_malloc_r+0xb0>)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	b923      	cbnz	r3, 8007346 <_malloc_r+0x3e>
 800733c:	4621      	mov	r1, r4
 800733e:	4630      	mov	r0, r6
 8007340:	f000 f862 	bl	8007408 <_sbrk_r>
 8007344:	6038      	str	r0, [r7, #0]
 8007346:	4629      	mov	r1, r5
 8007348:	4630      	mov	r0, r6
 800734a:	f000 f85d 	bl	8007408 <_sbrk_r>
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	d123      	bne.n	800739a <_malloc_r+0x92>
 8007352:	230c      	movs	r3, #12
 8007354:	6033      	str	r3, [r6, #0]
 8007356:	4630      	mov	r0, r6
 8007358:	f000 f86c 	bl	8007434 <__malloc_unlock>
 800735c:	e7e3      	b.n	8007326 <_malloc_r+0x1e>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	1b5b      	subs	r3, r3, r5
 8007362:	d417      	bmi.n	8007394 <_malloc_r+0x8c>
 8007364:	2b0b      	cmp	r3, #11
 8007366:	d903      	bls.n	8007370 <_malloc_r+0x68>
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	441c      	add	r4, r3
 800736c:	6025      	str	r5, [r4, #0]
 800736e:	e004      	b.n	800737a <_malloc_r+0x72>
 8007370:	6863      	ldr	r3, [r4, #4]
 8007372:	42a2      	cmp	r2, r4
 8007374:	bf0c      	ite	eq
 8007376:	600b      	streq	r3, [r1, #0]
 8007378:	6053      	strne	r3, [r2, #4]
 800737a:	4630      	mov	r0, r6
 800737c:	f000 f85a 	bl	8007434 <__malloc_unlock>
 8007380:	f104 000b 	add.w	r0, r4, #11
 8007384:	1d23      	adds	r3, r4, #4
 8007386:	f020 0007 	bic.w	r0, r0, #7
 800738a:	1ac2      	subs	r2, r0, r3
 800738c:	d0cc      	beq.n	8007328 <_malloc_r+0x20>
 800738e:	1a1b      	subs	r3, r3, r0
 8007390:	50a3      	str	r3, [r4, r2]
 8007392:	e7c9      	b.n	8007328 <_malloc_r+0x20>
 8007394:	4622      	mov	r2, r4
 8007396:	6864      	ldr	r4, [r4, #4]
 8007398:	e7cc      	b.n	8007334 <_malloc_r+0x2c>
 800739a:	1cc4      	adds	r4, r0, #3
 800739c:	f024 0403 	bic.w	r4, r4, #3
 80073a0:	42a0      	cmp	r0, r4
 80073a2:	d0e3      	beq.n	800736c <_malloc_r+0x64>
 80073a4:	1a21      	subs	r1, r4, r0
 80073a6:	4630      	mov	r0, r6
 80073a8:	f000 f82e 	bl	8007408 <_sbrk_r>
 80073ac:	3001      	adds	r0, #1
 80073ae:	d1dd      	bne.n	800736c <_malloc_r+0x64>
 80073b0:	e7cf      	b.n	8007352 <_malloc_r+0x4a>
 80073b2:	bf00      	nop
 80073b4:	20000090 	.word	0x20000090
 80073b8:	20000094 	.word	0x20000094

080073bc <_realloc_r>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	4607      	mov	r7, r0
 80073c0:	4614      	mov	r4, r2
 80073c2:	460e      	mov	r6, r1
 80073c4:	b921      	cbnz	r1, 80073d0 <_realloc_r+0x14>
 80073c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80073ca:	4611      	mov	r1, r2
 80073cc:	f7ff bf9c 	b.w	8007308 <_malloc_r>
 80073d0:	b922      	cbnz	r2, 80073dc <_realloc_r+0x20>
 80073d2:	f7ff ff49 	bl	8007268 <_free_r>
 80073d6:	4625      	mov	r5, r4
 80073d8:	4628      	mov	r0, r5
 80073da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073dc:	f000 f830 	bl	8007440 <_malloc_usable_size_r>
 80073e0:	42a0      	cmp	r0, r4
 80073e2:	d20f      	bcs.n	8007404 <_realloc_r+0x48>
 80073e4:	4621      	mov	r1, r4
 80073e6:	4638      	mov	r0, r7
 80073e8:	f7ff ff8e 	bl	8007308 <_malloc_r>
 80073ec:	4605      	mov	r5, r0
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d0f2      	beq.n	80073d8 <_realloc_r+0x1c>
 80073f2:	4631      	mov	r1, r6
 80073f4:	4622      	mov	r2, r4
 80073f6:	f7ff ff0f 	bl	8007218 <memcpy>
 80073fa:	4631      	mov	r1, r6
 80073fc:	4638      	mov	r0, r7
 80073fe:	f7ff ff33 	bl	8007268 <_free_r>
 8007402:	e7e9      	b.n	80073d8 <_realloc_r+0x1c>
 8007404:	4635      	mov	r5, r6
 8007406:	e7e7      	b.n	80073d8 <_realloc_r+0x1c>

08007408 <_sbrk_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4d06      	ldr	r5, [pc, #24]	; (8007424 <_sbrk_r+0x1c>)
 800740c:	2300      	movs	r3, #0
 800740e:	4604      	mov	r4, r0
 8007410:	4608      	mov	r0, r1
 8007412:	602b      	str	r3, [r5, #0]
 8007414:	f7f9 ff06 	bl	8001224 <_sbrk>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	d102      	bne.n	8007422 <_sbrk_r+0x1a>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	b103      	cbz	r3, 8007422 <_sbrk_r+0x1a>
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	200005e8 	.word	0x200005e8

08007428 <__malloc_lock>:
 8007428:	4801      	ldr	r0, [pc, #4]	; (8007430 <__malloc_lock+0x8>)
 800742a:	f000 b811 	b.w	8007450 <__retarget_lock_acquire_recursive>
 800742e:	bf00      	nop
 8007430:	200005f0 	.word	0x200005f0

08007434 <__malloc_unlock>:
 8007434:	4801      	ldr	r0, [pc, #4]	; (800743c <__malloc_unlock+0x8>)
 8007436:	f000 b80c 	b.w	8007452 <__retarget_lock_release_recursive>
 800743a:	bf00      	nop
 800743c:	200005f0 	.word	0x200005f0

08007440 <_malloc_usable_size_r>:
 8007440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007444:	1f18      	subs	r0, r3, #4
 8007446:	2b00      	cmp	r3, #0
 8007448:	bfbc      	itt	lt
 800744a:	580b      	ldrlt	r3, [r1, r0]
 800744c:	18c0      	addlt	r0, r0, r3
 800744e:	4770      	bx	lr

08007450 <__retarget_lock_acquire_recursive>:
 8007450:	4770      	bx	lr

08007452 <__retarget_lock_release_recursive>:
 8007452:	4770      	bx	lr

08007454 <_init>:
 8007454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007456:	bf00      	nop
 8007458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745a:	bc08      	pop	{r3}
 800745c:	469e      	mov	lr, r3
 800745e:	4770      	bx	lr

08007460 <_fini>:
 8007460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007462:	bf00      	nop
 8007464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007466:	bc08      	pop	{r3}
 8007468:	469e      	mov	lr, r3
 800746a:	4770      	bx	lr
